(()=>{"use strict";class e{constructor(e){this.elemModal=null,this.eventShowModal=null,this.eventHideModal=null,this.hiding=!1,this.destroyed=!1,this.animationSpeed=200,this.options=e||{},this.createModal(),this.elemModal.addEventListener("click",this.handlerCloseModal.bind(this)),this.eventShowModal=new CustomEvent("show.modalFunc",{detail:this.elemModal}),this.eventHideModal=new CustomEvent("hide.modalFunc",{detail:this.elemModal})}createModal(){this.elemModal=document.createElement("div");let e,t="";if(this.elemModal.classList.add("modalFunc"),e='<div class="modal__backdrop" data-dismiss="modalFunc"><div class="modal__content"><div class="modal__header"><div class="modal__title" data-modalFunc="title">{{title}}</div><span class="modal__btn-close" data-dismiss="modalFunc" title="Закрыть">×</span></div><div class="modal__body" data-modalFunc="content">{{content}}</div>{{footer}}</div></div>'.replace("{{title}}",this.options.title||"Новое окно"),e=e.replace("{{content}}",this.options.content||""),this.options.footerButtons){for(const e of this.options.footerButtons){let a='<button type="button" class="{{button_class}}" data-handler={{button_handler}}>{{button_text}}</button>'.replace("{{button_class}}",e.class);a=a.replace("{{button_handler}}",e.handler),a=a.replace("{{button_text}}",e.text),t+=a}t='<div class="modal__footer">{{buttons}}</div>'.replace("{{buttons}}",t)}e=e.replace("{{footer}}",t),this.elemModal.innerHTML=e,document.body.appendChild(this.elemModal)}show(){this.destroyed||this.hiding||(this.elemModal.classList.add("modal__show"),document.dispatchEvent(this.eventShowModal))}hide(){this.hiding=!0,this.elemModal.classList.remove("modal__show"),this.elemModal.classList.add("modal__hiding"),setTimeout((()=>{this.elemModal.classList.remove("modal__hiding"),this.hiding=!1}),this.animationSpeed),document.dispatchEvent(this.eventHideModal)}handlerCloseModal(e){("modalFunc"===e.target.dataset.dismiss||e.target.dataset.handler)&&this.hide()}destroy(){this.elemModal.parentElement&&this.elemModal.parentElement.removeChild(this.elemModal),this.elemModal.removeEventListener("click",this.handlerCloseModal.bind(this))}setContent(e){this.elemModal.querySelector('[data-modalFunc="content"]').innerHTML=e}setTitle(e){this.elemModal.querySelector('[data-modalFunc="title"]').innerHTML=e}}function t(e,t){if(e<t-1&&e>0)return"top";if(e<t**2-1&&e>t**2-t)return"bottom";for(let a=1;a<t-1;a+=1){if(e===t*a)return"left";if(e===t*a+(t-1))return"right"}switch(e){case 0:return"top-left";case t-1:return"top-right";case t*(t-1):return"bottom-left";case t**2-1:return"bottom-right";default:return"center"}}function a(e,t){return e.map(t)}function s(e,t){return Math.floor(Math.max(e,e*(80+t)/100))}function i(e,t){return Object.assign(e,t),e}const l={prairie:"prairie",desert:"desert",arctic:"arctic",mountain:"mountain"};class n{constructor(e){this.levelGame=1,this.gamePlay=e,this.isMove="user",this.countClick=0,this.userTeamSurvivors=[],this.history=[],this.points=0,this.block=!1,this.userTeam=[],this.compTeam=[],this.activeChar=null,this.indexSelect=null,this.transitionCells=[],this.attackCells=[],this.showModal=!1}getAllPlayer(){if(!this.userTeam||!this.compTeam)throw new Error("it must have 2 arguments");return[...this.userTeam,...this.compTeam]}calculateSumPoints(){return this.userTeam.reduce(((e,t)=>e+t.character.health),0)}getUserPosition(){const e=this.userTeam.find((e=>this.attackCells.includes(e.position)));return e?e.position:void 0}findPresumedDeceasedPlayer(){return this.getAllPlayer().find((e=>e.position===this.activeCharUser?.position))}getPresumedDeceasedPlayerInfo(e){return{index:("comp"===this.isMove?this.userTeam:this.compTeam).findIndex((t=>e===t.position)),teamKey:"comp"===this.isMove?"userTeam":"compTeam"}}getPlayer(e){return this.getAllPlayer().find((t=>t.position===e))}}const o="auto",h="pointer",r="crosshair",c="not-allowed";function d(e,t,a){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const i=[];for(let e=0;e<t**2;e+=1)i.push(e);const l=function(e,t){const a=[];for(let s=0,i=t;s<e.length;s+=t,i+=t)a.push(e.slice(s,i));return a}(i,t);return s?function(e,t,a){const s=[];let i,l;for(let a=0;a<e.length&&(l=a,i=e[a].findIndex((e=>e===t)),-1===i);a+=1);for(let n=-a;n<=a;n+=1)for(let o=-a;o<=a;o+=1)l+n>=0&&i+o>=0&&l+n<e.length&&i+o<e.length&&e[l+n][i+o]!==t&&s.push(e[l+n][i+o]);return s}(l,e,a):function(e,t,a){const s=[];let i,l;for(let a=0;a<e.length&&(l=a,i=e[a].findIndex((e=>e===t)),-1===i);a+=1);for(let t=1;t<=a;t+=1)i-t>=0&&s.push(e[l][i-t]),i+t<e.length&&s.push(e[l][i+t]),l+t<e.length&&i-t>=0&&s.push(e[l+t][i-t]),l+t<e.length&&i+t<e.length&&s.push(e[l+t][i+t]),l-t>=0&&i-t>=0&&s.push(e[l-t][i-t]),l-t>=0&&i+t<e.length&&s.push(e[l-t][i+t]),l-t>=0&&s.push(e[l-t][i]),l+t<e.length&&s.push(e[l+t][i]);return s}(l,e,a)}class m{constructor(e){this.characters=e}}class u{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if("Character"===new.target.name)throw new Error("Invalid class");this.type=t,this.level=e,this.attack=0,this.defence=0,this.health=50}levelUp(){if(this.health<=0)throw new Error("Can't level up a dead character");this.level=Math.min(this.level+1,4),this.attack=s(this.attack,this.health),this.defence=s(this.defence,this.health),this.health=Math.min(this.health+80,100)}}class g{constructor(e,t){this.character=e,this.position=t}set character(e){if(!(e instanceof u))throw new Error("character must be instance of Character or its children");this._character=e}get character(){return this._character}set position(e){if("number"!=typeof e)throw new Error("position must be a number");this._position=e}get position(){return this._position}}class S extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="bowman",this.attack=25,this.defence=25,this.maxRange=2,this.maxAttack=2}}class v extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="swordsman",this.attack=40,this.defence=10,this.maxRange=4,this.maxAttack=1}}class p extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="magician",this.attack=10,this.defence=40,this.maxRange=1,this.maxAttack=4}}class C extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="daemon",this.attack=10,this.defence=10,this.maxRange=1,this.maxAttack=4}}class f extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="undead",this.attack=40,this.defence=10,this.maxRange=4,this.maxAttack=1}}class y extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="vampire",this.attack=25,this.defence=25,this.maxRange=2,this.maxAttack=2}}function w(e){const t=[];if(arguments.length>1&&void 0!==arguments[1]&&arguments[1])for(let a=e-2;a<e**2;a+=e)t.push(a),t.push(a+1);else for(let a=0;a<e**2;a+=8)t.push(a),t.push(a+1);return t}function M(e){const t=w(e,arguments.length>1&&void 0!==arguments[1]&&arguments[1]);return t[Math.floor(Math.random()*t.length)]}function P(e,t,a,s){let[i,l]=s;const n=[];i>=4&&(i=4),l>=10&&(l=10);const o=function(e,t,a){const s=[],i=function*(e,t){for(;;){const a=Math.floor(Math.random()*t+1),s=e[Math.floor(Math.random()*e.length)];yield new s(a)}}(e,t);for(let e=0;e<a;e+=1)s.push(i.next().value);return new m(s)}(e,i,l),h=[];return o.characters.forEach((e=>{let s,i=!1;do{s=M(t,a),h.find((e=>e===s))?s=M(t,a):(h.push(s),i=!0)}while(!i);n.push(new g(e,s))})),n}function k(e){if(!e)return null;const t=new({bowman:S,swordsman:v,magician:p,daemon:C,undead:f,vampire:y}[e._character.type]||null)(e._character.level),a=new g(t,e._position);return t.attack=e._character.attack,t.health=e._character.health,t.defence=e._character.defence,a}const b=new class{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[],this.isModal=!1,this.initModalListener()}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}initModalListener(){document.addEventListener("click",(e=>{"modalHandlerCancel"===e.target.dataset.handler&&this.currentModal&&(this.currentModal.hide(),this.isModal=!1)}))}drawUi(e){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(e);for(let e=0;e<this.boardSize**2;e+=1){const a=document.createElement("div");a.classList.add("cell","map-tile",`map-tile-${t(e,this.boardSize)}`),a.addEventListener("mouseenter",(e=>this.onCellEnter(e))),a.addEventListener("mouseleave",(e=>this.onCellLeave(e))),a.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(a)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const a of e){const e=this.boardEl.children[a.position],s=document.createElement("div");s.classList.add("character",a.character.type);const i=document.createElement("div");i.classList.add("health-level");const l=document.createElement("div");l.classList.add("health-level-indicator","health-level-indicator-"+((t=a.character.health)<15?"critical":t<50?"normal":"high")),l.style.width=`${a.character.health}%`,i.appendChild(l),s.appendChild(i),e.appendChild(s)}var t}showModal(t,a){const s=new e({title:t,content:`&#${a}`,footerButtons:[{class:"btn btn__cancel",text:"Close",handler:"modalHandlerCancel"}]});this.currentModal=s,s.show()}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(){this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(){this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(){this.loadGameListeners.forEach((e=>e.call(null)))}showModalMessage(e,t){this.isModal||(this.isModal=!0,this.showModal(e,t))}selectCell(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t&&t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((a=>{const s=this.cells[e],i=document.createElement("span");i.className="damage",i.textContent=t,s.appendChild(i),i.addEventListener("animationend",(()=>{s.removeChild(i),a(!0)}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}};b.bindToDOM(document.querySelector("#game-container"));const L=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),T=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.gameState=new n(this.gamePlay),this.onCellClick=this.onCellClick.bind(this),this.onCellEnter=this.onCellEnter.bind(this),this.onCellLeave=this.onCellLeave.bind(this),this.newGame=this.newGame.bind(this),this.saveGame=this.saveGame.bind(this),this.loadGame=this.loadGame.bind(this),this.events()}init(){this.initNewTeams(),this.updatePicture()}events(){this.gamePlay.addCellEnterListener(this.onCellEnter),this.gamePlay.addCellLeaveListener(this.onCellLeave),this.gamePlay.addCellClickListener(this.onCellClick),this.gamePlay.addNewGameListener(this.newGame),this.gamePlay.addSaveGameListener(this.saveGame),this.gamePlay.addLoadGameListener(this.loadGame)}newGame(){const e={levelGame:1,countClick:0,history:[...this.gameState.history,{levelGame:this.gameState.levelGame,points:this.gameState.points}],isMove:"user",block:!1,points:0};i(this.gameState,e),this.reset(),this.init()}saveGame(){this.gameState.attackCells=[],this.gameState.transitionCells=[],this.gameState.activeCharUser=null,this.stateService.save(this.gameState),this.gamePlay.showModalMessage("Your game has saved!","9997")}loadGame(){try{const e=this.stateService.load();this.restoreGameState(e),this.restoreActiveCharacter(e.activeChar),this.updatePicture(),this.showGameInfo()}catch(e){this.handleLoadingError()}}restoreGameState(e){const{levelGame:t,countClick:a,history:s,isMove:l,block:n,points:o,indexSelect:h}=e;i(this.gameState,{levelGame:n?t-1:t,countClick:a,history:s,isMove:l,block:n,points:o,indexSelect:h}),this.resetTeams(e)}restoreActiveCharacter(e){const t=k(e);t&&"user"===t.isMove&&this.reactOnClick(t,["bowman","swordsman","magician"])}handleLoadingError(){this.gamePlay.showModalMessage("There's no game in memory","128075"),this.newGame()}initNewTeams(){this.gameState.userTeam=this.getUserTeam([this.gameState.levelGame,this.gameState.levelGame]),this.gameState.compTeam=this.getCompTeam([this.gameState.levelGame,this.gameState.levelGame])}getUserTeam(e){let[t,a]=e;const s=P([S,v,p],this.gamePlay.boardSize,!1,[t,a]);return this.gameState.userTeam=s,s}getCompTeam(e){let[t,a]=e;const s=P([y,C,f],this.gamePlay.boardSize,!0,[t,a]);return this.gameState.compTeam=s,s}resetTeams(e){this.gameState.userTeam=a(e.userTeam,k),this.gameState.compTeam=a(e.compTeam,k)}levelUp(){const e=Object.values(l);this.updateTeams(),this.gameState.getAllPlayer().forEach((e=>e.character.levelUp())),this.gamePlay.drawUi(e[(this.gameState.levelGame-1)%e.length]),this.gameState.countClick=0,this.gameState.indexSelect=null}updateTeams(){const e=this.getUserTeam([this.gameState.levelGame-1,this.gameState.levelGame]),t=w(this.gamePlay.boardSize);e.forEach((e=>{t.splice(t.indexOf(e.position),1)})),this.gameState.userTeamSurvivors.forEach((e=>{if(!t.includes(e.position)){const a=t[Math.floor(Math.random()*t.length)];e.position=a}})),this.gameState.userTeam=this.gameState.userTeamSurvivors.concat(e),this.gameState.userTeamSurvivors=[],this.gameState.compTeam=this.getCompTeam([this.gameState.levelGame-1,this.gameState.userTeam.length])}showGameInfo(){const e=this.gameState.points?`Your level ${this.gameState.levelGame} and points ${this.gameState.points}`:"There's no points. \n It's the first round",t=this.gameState.points?"128076":"128083";this.gamePlay.showModalMessage(e,t)}async onCellClick(e){if(this.gameState.block)return;const t=this.gameState.getAllPlayer().find((t=>t.position===e));this.gameState.activeChar&&await this.handleUserTurn(e),this.reactOnClick(t,["bowman","swordsman","magician"]),this.gameState.countClick>=1&&await this.handleComputerTurn()}async handleUserTurn(e){this.gameState.indexSelect&&(this.gameState.indexSelect.green===e&&(this.gameState.activeChar.position=e,this.gameState.countClick+=1,this.gamePlay.redrawPositions(this.gameState.getAllPlayer())),this.gameState.indexSelect.red===e)&&(this.gameState.isMove="user",await this.doDamage(e)&&(this.gameState.countClick+=1,this.gamePlay.redrawPositions(this.gameState.getAllPlayer()),await this.checkGameProgress()))}async checkGameProgress(){0===this.gameState.compTeam.length&&(this.gameState.levelGame+=1,this.gameState.points+=this.gameState.calculateSumPoints(),this.reset(),this.gameState.userTeamSurvivors=this.gameState.userTeam,this.gamePlay.showModalMessage(`Level up! Your level ${this.gameState.levelGame} and total points are ${this.gameState.points}`,"9996"),this.levelUp(),this.gamePlay.redrawPositions(this.gameState.getAllPlayer()))}async handleComputerTurn(){this.gameState.activeCharUser=this.gameState.activeChar,this.gameState.isMove="comp",await this.doAttackComp(this)&&(this.gameState.countClick=0,this.gameState.isMove="user",this.gameState.findPresumedDeceasedPlayer()&&(this.gameState.activeChar=this.gameState.activeCharUser,this.reactOnClick(this.gameState.activeChar,["bowman","swordsman","magician"]),this.gamePlay.redrawPositions(this.gameState.getAllPlayer())))}onCellEnter(e){if(this.gameState.block)return;const t=this.gameState.getPlayer(e);if(t&&this.gamePlay.showCellTooltip(function(e){return`🎖${e.level} ⚔${e.attack} 🛡${e.defence} ❤${e.health}`}(t.character),e),!this.gameState.activeChar)return;const a=this.gameState.transitionCells.includes(e),s=this.gameState.attackCells.includes(e),i=this.gameState.userTeam.some((t=>t.position===e)),l=this.gameState.compTeam.some((t=>t.position===e));this.gamePlay.setCursor(h),this.gameState.indexSelect&&(!a||i||l||(this.gameState.indexSelect.green=e,this.gamePlay.selectCell(e,"green")),s&&l&&(this.gameState.indexSelect.red=e,this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(r)))}onCellLeave(e){if(this.gamePlay.hideCellTooltip(e),this.gameState.block)return;const t=document.querySelector(".selected-green"),a=this.gameState.attackCells?.includes(e),s=this.gameState.compTeam.some((t=>t.position===e));t&&(this.gamePlay.deselectCell(this.gameState.indexSelect.green),!a&&s&&(this.gamePlay.deselectCell(this.gameState.indexSelect.green),this.gamePlay.setCursor(c))),document.querySelector(".selected-red")&&this.gamePlay.deselectCell(this.gameState.indexSelect.red)}reactOnClick(e,t){if(e)if(t.includes(e.character.type)){this.updateSelectedCell(e.position),this.gamePlay.selectCell(e.position),this.gameState.activeChar=e;const{maxRange:t,maxAttack:a}=e.character;this.gameState.transitionCells=d(e.position,this.gamePlay.boardSize,t),this.gameState.attackCells=d(e.position,this.gamePlay.boardSize,a,!0)}else this.handleInvalidSelection(e.position)}updateSelectedCell(e){this.gameState.indexSelect&&document.querySelector(".selected-yellow")&&this.gamePlay.deselectCell(this.gameState.indexSelect.yellow),this.gameState.indexSelect={yellow:e}}handleInvalidSelection(e){const t=this.gameState.indexSelect,a=!this.gameState.attackCells.includes(e),s=this.gameState.compTeam.some((t=>t.position===e));t&&a&&s?this.gamePlay.showModalMessage("It can't be done","9940"):this.gameState.activeChar||this.gamePlay.showModalMessage("This isn`t your character","9995")}async doDamage(e){const{attack:t}=this.gameState.activeChar.character,a=this.gameState.getPlayer(e),{defence:s,health:i}=a.character,l=function(e,t){return Math.round(Math.max(e-t,.3*e))}(t,s);return!!await this.gamePlay.showDamage(e,l)&&(a.character.health=i-l,this.checkHealthRemoveDead(a),!0)}checkHealthRemoveDead(e){if(e.character.health<=0){const t=this.gameState.getPresumedDeceasedPlayerInfo(e.position);-1!==t.index&&(this.gameState[t.teamKey].splice(t.index,1),this.gameState.indexSelect=null)}}reset(){this.gameState.indexSelect&&(Object.keys(this.gameState.indexSelect).forEach((e=>{this.gamePlay.deselectCell(this.gameState.indexSelect[e])})),this.gameState.indexSelect=null,this.gamePlay.setCursor(o))}updatePicture(){const e=this.gameState.levelGame>0?this.gameState.levelGame-1:0;this.gamePlay.drawUi(Object.values(l)[e]),this.gamePlay.redrawPositions(this.gameState.getAllPlayer()),this.gameState.indexSelect&&this.gameState.indexSelect.yellow&&this.gamePlay.selectCell(this.gameState.indexSelect.yellow)}async doAttackComp(){const e=(t=this.gameState.compTeam)[Math.floor(Math.random()*t.length)];var t;this.gameState.activeChar=e,this.reactOnClick(e,["daemon","undead","vampire"]);const a=this.gameState.getUserPosition();return void 0!==a?await this.doDamage(a)&&(this.checkAndEndGameIfNecessary(),this.updatePicture()):(this.gameState.activeChar.position=this.moveToRandomPosition(),this.gamePlay.redrawPositions(this.gameState.getAllPlayer())),this.gameState.activeChar=null,this.reset(),!0}checkAndEndGameIfNecessary(){0===this.gameState.userTeam.length&&(this.gameState.block=!0,this.gamePlay.showModalMessage("You lose!","129335"))}moveToRandomPosition(){let e,t;do{e=Math.floor(Math.random()*this.gameState.transitionCells.length);const a=this.gameState.transitionCells[e];t=this.gameState.getAllPlayer().some((e=>e.position===a))}while(t);return this.gameState.transitionCells[e]}}(b,L);T.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly4vc3JjL2pzL01vZGFsUG9wdXAuanMiLCJ3ZWJwYWNrOi8vYWpzLWN1cnNvdmEvLi9zcmMvanMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYWpzLWN1cnNvdmEvLi9zcmMvanMvdGhlbWVzLmpzIiwid2VicGFjazovL2Fqcy1jdXJzb3ZhLy4vc3JjL2pzL0dhbWVTdGF0ZS5qcyIsIndlYnBhY2s6Ly9hanMtY3Vyc292YS8uL3NyYy9qcy9jdXJzb3JzLmpzIiwid2VicGFjazovL2Fqcy1jdXJzb3ZhLy4vc3JjL2pzL3RyYW5zaXRpb25BdHRhY2tDZWxscy5qcyIsIndlYnBhY2s6Ly9hanMtY3Vyc292YS8uL3NyYy9qcy9UZWFtLmpzIiwid2VicGFjazovL2Fqcy1jdXJzb3ZhLy4vc3JjL2pzL2NoYXJhY3RlcnMvQ2hhcmFjdGVyLmpzIiwid2VicGFjazovL2Fqcy1jdXJzb3ZhLy4vc3JjL2pzL1Bvc2l0aW9uZWRDaGFyYWN0ZXIuanMiLCJ3ZWJwYWNrOi8vYWpzLWN1cnNvdmEvLi9zcmMvanMvY2hhcmFjdGVycy9Cb3dtYW4uanMiLCJ3ZWJwYWNrOi8vYWpzLWN1cnNvdmEvLi9zcmMvanMvY2hhcmFjdGVycy9Td29yZHNtYW4uanMiLCJ3ZWJwYWNrOi8vYWpzLWN1cnNvdmEvLi9zcmMvanMvY2hhcmFjdGVycy9NYWdpY2lhbi5qcyIsIndlYnBhY2s6Ly9hanMtY3Vyc292YS8uL3NyYy9qcy9jaGFyYWN0ZXJzL0RhZW1vbi5qcyIsIndlYnBhY2s6Ly9hanMtY3Vyc292YS8uL3NyYy9qcy9jaGFyYWN0ZXJzL1VuZGVhZC5qcyIsIndlYnBhY2s6Ly9hanMtY3Vyc292YS8uL3NyYy9qcy9jaGFyYWN0ZXJzL1ZhbXBpcmUuanMiLCJ3ZWJwYWNrOi8vYWpzLWN1cnNvdmEvLi9zcmMvanMvY3JlYXRlUG9zaXRpb25zLmpzIiwid2VicGFjazovL2Fqcy1jdXJzb3ZhLy4vc3JjL2pzL2dlbmVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vYWpzLWN1cnNvdmEvLi9zcmMvanMvYXBwLmpzIiwid2VicGFjazovL2Fqcy1jdXJzb3ZhLy4vc3JjL2pzL0dhbWVQbGF5LmpzIiwid2VicGFjazovL2Fqcy1jdXJzb3ZhLy4vc3JjL2pzL0dhbWVTdGF0ZVNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vYWpzLWN1cnNvdmEvLi9zcmMvanMvR2FtZUNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWxQb3B1cCB7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgdGhpcy5lbGVtTW9kYWwgPSBudWxsO1xyXG4gICAgdGhpcy5ldmVudFNob3dNb2RhbCA9IG51bGw7XHJcbiAgICB0aGlzLmV2ZW50SGlkZU1vZGFsID0gbnVsbDtcclxuICAgIHRoaXMuaGlkaW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5hbmltYXRpb25TcGVlZCA9IDIwMDtcclxuXHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAgIHRoaXMuY3JlYXRlTW9kYWwoKTtcclxuICAgIHRoaXMuZWxlbU1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZXJDbG9zZU1vZGFsLmJpbmQodGhpcykpO1xyXG5cclxuICAgIHRoaXMuZXZlbnRTaG93TW9kYWwgPSBuZXcgQ3VzdG9tRXZlbnQoXCJzaG93Lm1vZGFsRnVuY1wiLCB7XHJcbiAgICAgIGRldGFpbDogdGhpcy5lbGVtTW9kYWwsXHJcbiAgICB9KTtcclxuICAgIHRoaXMuZXZlbnRIaWRlTW9kYWwgPSBuZXcgQ3VzdG9tRXZlbnQoXCJoaWRlLm1vZGFsRnVuY1wiLCB7XHJcbiAgICAgIGRldGFpbDogdGhpcy5lbGVtTW9kYWwsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU1vZGFsKCkge1xyXG4gICAgdGhpcy5lbGVtTW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgY29uc3QgbW9kYWxUZW1wbGF0ZSA9XHJcbiAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWxfX2JhY2tkcm9wXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxGdW5jXCI+PGRpdiBjbGFzcz1cIm1vZGFsX19jb250ZW50XCI+PGRpdiBjbGFzcz1cIm1vZGFsX19oZWFkZXJcIj48ZGl2IGNsYXNzPVwibW9kYWxfX3RpdGxlXCIgZGF0YS1tb2RhbEZ1bmM9XCJ0aXRsZVwiPnt7dGl0bGV9fTwvZGl2PjxzcGFuIGNsYXNzPVwibW9kYWxfX2J0bi1jbG9zZVwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsRnVuY1wiIHRpdGxlPVwi0JfQsNC60YDRi9GC0YxcIj7Dlzwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVwibW9kYWxfX2JvZHlcIiBkYXRhLW1vZGFsRnVuYz1cImNvbnRlbnRcIj57e2NvbnRlbnR9fTwvZGl2Pnt7Zm9vdGVyfX08L2Rpdj48L2Rpdj4nO1xyXG4gICAgY29uc3QgbW9kYWxGb290ZXJUZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPVwibW9kYWxfX2Zvb3RlclwiPnt7YnV0dG9uc319PC9kaXY+JztcclxuICAgIGNvbnN0IG1vZGFsQnV0dG9uVGVtcGxhdGUgPVxyXG4gICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ7e2J1dHRvbl9jbGFzc319XCIgZGF0YS1oYW5kbGVyPXt7YnV0dG9uX2hhbmRsZXJ9fT57e2J1dHRvbl90ZXh0fX08L2J1dHRvbj4nO1xyXG4gICAgbGV0IG1vZGFsSFRNTDtcclxuICAgIGxldCBtb2RhbEZvb3RlckhUTUwgPSBcIlwiO1xyXG5cclxuICAgIHRoaXMuZWxlbU1vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbEZ1bmNcIik7XHJcbiAgICBtb2RhbEhUTUwgPSBtb2RhbFRlbXBsYXRlLnJlcGxhY2UoXHJcbiAgICAgIFwie3t0aXRsZX19XCIsXHJcbiAgICAgIHRoaXMub3B0aW9ucy50aXRsZSB8fCBcItCd0L7QstC+0LUg0L7QutC90L5cIlxyXG4gICAgKTtcclxuICAgIG1vZGFsSFRNTCA9IG1vZGFsSFRNTC5yZXBsYWNlKFwie3tjb250ZW50fX1cIiwgdGhpcy5vcHRpb25zLmNvbnRlbnQgfHwgXCJcIik7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmZvb3RlckJ1dHRvbnMpIHtcclxuICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGhpcy5vcHRpb25zLmZvb3RlckJ1dHRvbnMpIHtcclxuICAgICAgICBsZXQgbW9kYWxGb290ZXJCdXR0b24gPSBtb2RhbEJ1dHRvblRlbXBsYXRlLnJlcGxhY2UoXHJcbiAgICAgICAgICBcInt7YnV0dG9uX2NsYXNzfX1cIixcclxuICAgICAgICAgIGJ1dHRvbi5jbGFzc1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgbW9kYWxGb290ZXJCdXR0b24gPSBtb2RhbEZvb3RlckJ1dHRvbi5yZXBsYWNlKFxyXG4gICAgICAgICAgXCJ7e2J1dHRvbl9oYW5kbGVyfX1cIixcclxuICAgICAgICAgIGJ1dHRvbi5oYW5kbGVyXHJcbiAgICAgICAgKTtcclxuICAgICAgICBtb2RhbEZvb3RlckJ1dHRvbiA9IG1vZGFsRm9vdGVyQnV0dG9uLnJlcGxhY2UoXHJcbiAgICAgICAgICBcInt7YnV0dG9uX3RleHR9fVwiLFxyXG4gICAgICAgICAgYnV0dG9uLnRleHRcclxuICAgICAgICApO1xyXG4gICAgICAgIG1vZGFsRm9vdGVySFRNTCArPSBtb2RhbEZvb3RlckJ1dHRvbjtcclxuICAgICAgfVxyXG4gICAgICBtb2RhbEZvb3RlckhUTUwgPSBtb2RhbEZvb3RlclRlbXBsYXRlLnJlcGxhY2UoXHJcbiAgICAgICAgXCJ7e2J1dHRvbnN9fVwiLFxyXG4gICAgICAgIG1vZGFsRm9vdGVySFRNTFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgbW9kYWxIVE1MID0gbW9kYWxIVE1MLnJlcGxhY2UoXCJ7e2Zvb3Rlcn19XCIsIG1vZGFsRm9vdGVySFRNTCk7XHJcbiAgICB0aGlzLmVsZW1Nb2RhbC5pbm5lckhUTUwgPSBtb2RhbEhUTUw7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWxlbU1vZGFsKTtcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBpZiAoIXRoaXMuZGVzdHJveWVkICYmICF0aGlzLmhpZGluZykge1xyXG4gICAgICB0aGlzLmVsZW1Nb2RhbC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfX3Nob3dcIik7XHJcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQodGhpcy5ldmVudFNob3dNb2RhbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgdGhpcy5oaWRpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5lbGVtTW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX19zaG93XCIpO1xyXG4gICAgdGhpcy5lbGVtTW9kYWwuY2xhc3NMaXN0LmFkZChcIm1vZGFsX19oaWRpbmdcIik7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5lbGVtTW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX19oaWRpbmdcIik7XHJcbiAgICAgIHRoaXMuaGlkaW5nID0gZmFsc2U7XHJcbiAgICB9LCB0aGlzLmFuaW1hdGlvblNwZWVkKTtcclxuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQodGhpcy5ldmVudEhpZGVNb2RhbCk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVyQ2xvc2VNb2RhbChlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQuZGF0YXNldC5kaXNtaXNzID09PSBcIm1vZGFsRnVuY1wiIHx8IGUudGFyZ2V0LmRhdGFzZXQuaGFuZGxlcikge1xyXG4gICAgICB0aGlzLmhpZGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5lbGVtTW9kYWwucGFyZW50RWxlbWVudCkge1xyXG4gICAgICB0aGlzLmVsZW1Nb2RhbC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbU1vZGFsKTtcclxuICAgIH1cclxuICAgIHRoaXMuZWxlbU1vZGFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXHJcbiAgICAgIFwiY2xpY2tcIixcclxuICAgICAgdGhpcy5oYW5kbGVyQ2xvc2VNb2RhbC5iaW5kKHRoaXMpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29udGVudChodG1sKSB7XHJcbiAgICB0aGlzLmVsZW1Nb2RhbC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tb2RhbEZ1bmM9XCJjb250ZW50XCJdJykuaW5uZXJIVE1MID0gaHRtbDtcclxuICB9XHJcblxyXG4gIHNldFRpdGxlKHRleHQpIHtcclxuICAgIHRoaXMuZWxlbU1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW1vZGFsRnVuYz1cInRpdGxlXCJdJykuaW5uZXJIVE1MID0gdGV4dDtcclxuICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIEB0b2RvXHJcbiAqIEBwYXJhbSBpbmRleCAtINC40L3QtNC10LrRgSDQv9C+0LvRj1xyXG4gKiBAcGFyYW0gYm9hcmRTaXplIC0g0YDQsNC30LzQtdGAINC60LLQsNC00YDQsNGC0L3QvtCz0L4g0L/QvtC70Y8gKNCyINC00LvQuNC90YMg0LjQu9C4INGI0LjRgNC40L3RgylcclxuICogQHJldHVybnMg0YHRgtGA0L7QutCwIC0g0YLQuNC/INGP0YfQtdC50LrQuCDQvdCwINC/0L7Qu9C1OlxyXG4gKlxyXG4gKiB0b3AtbGVmdFxyXG4gKiB0b3AtcmlnaHRcclxuICogdG9wXHJcbiAqIGJvdHRvbS1sZWZ0XHJcbiAqIGJvdHRvbS1yaWdodFxyXG4gKiBib3R0b21cclxuICogcmlnaHRcclxuICogbGVmdFxyXG4gKiBjZW50ZXJcclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBganNcclxuICogY2FsY1RpbGVUeXBlKDAsIDgpOyAvLyAndG9wLWxlZnQnXHJcbiAqIGNhbGNUaWxlVHlwZSgxLCA4KTsgLy8gJ3RvcCdcclxuICogY2FsY1RpbGVUeXBlKDYzLCA4KTsgLy8gJ2JvdHRvbS1yaWdodCdcclxuICogY2FsY1RpbGVUeXBlKDcsIDcpOyAvLyAnbGVmdCdcclxuICogYGBgXHJcbiAqICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjVGlsZVR5cGUoaW5kZXgsIGJvYXJkU2l6ZSkge1xyXG4gIC8vIFRPRE86INCy0LDRiCDQutC+0LQg0LHRg9C00LXRgiDRgtGD0YJcclxuICBpZiAoaW5kZXggPCBib2FyZFNpemUgLSAxICYmIGluZGV4ID4gMCkge1xyXG4gICAgcmV0dXJuIFwidG9wXCI7XHJcbiAgfVxyXG4gIGlmIChpbmRleCA8IGJvYXJkU2l6ZSAqKiAyIC0gMSAmJiBpbmRleCA+IGJvYXJkU2l6ZSAqKiAyIC0gYm9hcmRTaXplKSB7XHJcbiAgICByZXR1cm4gXCJib3R0b21cIjtcclxuICB9XHJcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBib2FyZFNpemUgLSAxOyBpICs9IDEpIHtcclxuICAgIGlmIChpbmRleCA9PT0gYm9hcmRTaXplICogaSkge1xyXG4gICAgICByZXR1cm4gXCJsZWZ0XCI7XHJcbiAgICB9XHJcbiAgICBpZiAoaW5kZXggPT09IGJvYXJkU2l6ZSAqIGkgKyAoYm9hcmRTaXplIC0gMSkpIHtcclxuICAgICAgcmV0dXJuIFwicmlnaHRcIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN3aXRjaCAoaW5kZXgpIHtcclxuICAgIGNhc2UgMDpcclxuICAgICAgcmV0dXJuIFwidG9wLWxlZnRcIjtcclxuICAgIGNhc2UgYm9hcmRTaXplIC0gMTpcclxuICAgICAgcmV0dXJuIFwidG9wLXJpZ2h0XCI7XHJcbiAgICBjYXNlIGJvYXJkU2l6ZSAqIChib2FyZFNpemUgLSAxKTpcclxuICAgICAgcmV0dXJuIFwiYm90dG9tLWxlZnRcIjtcclxuICAgIGNhc2UgYm9hcmRTaXplICoqIDIgLSAxOlxyXG4gICAgICByZXR1cm4gXCJib3R0b20tcmlnaHRcIjtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBcImNlbnRlclwiO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNIZWFsdGhMZXZlbChoZWFsdGgpIHtcclxuICBpZiAoaGVhbHRoIDwgMTUpIHtcclxuICAgIHJldHVybiBcImNyaXRpY2FsXCI7XHJcbiAgfVxyXG5cclxuICBpZiAoaGVhbHRoIDwgNTApIHtcclxuICAgIHJldHVybiBcIm5vcm1hbFwiO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFwiaGlnaFwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVzdG9yZUNoYXJhY3RlcnMoY2hhcmFjdGVycywgcmVzdG9yZUZuKSB7XHJcbiAgcmV0dXJuIGNoYXJhY3RlcnMubWFwKHJlc3RvcmVGbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cEF0dGFja0RlZmVuY2UoYmVmb3JlLCBsaWZlKSB7XHJcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5tYXgoYmVmb3JlLCAoYmVmb3JlICogKDgwICsgbGlmZSkpIC8gMTAwKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVEYW1hZ2UoYXR0YWNrLCBkZWZlbmNlKSB7XHJcbiAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5tYXgoYXR0YWNrIC0gZGVmZW5jZSwgYXR0YWNrICogMC4zKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmZvKHBsYXllcikge1xyXG4gIHJldHVybiBgXFx1ezFGMzk2fSR7cGxheWVyLmxldmVsfSBcXHUyNjk0JHtwbGF5ZXIuYXR0YWNrfSBcXHV7MUY2RTF9JHtwbGF5ZXIuZGVmZW5jZX0gXFx1Mjc2NCR7cGxheWVyLmhlYWx0aH1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb3ZlcndyaXRlUHJvcGVydGllcyh0YXJnZXQsIHNvdXJjZSkge1xyXG4gIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpO1xyXG4gIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21DaGFyYWN0ZXIodGVhbSkge1xyXG4gIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGVhbS5sZW5ndGgpO1xyXG4gIHJldHVybiB0ZWFtW3JhbmRvbUluZGV4XTtcclxufVxyXG4iLCJjb25zdCB0aGVtZXMgPSB7XHJcbiAgcHJhaXJpZTogXCJwcmFpcmllXCIsXHJcbiAgZGVzZXJ0OiBcImRlc2VydFwiLFxyXG4gIGFyY3RpYzogXCJhcmN0aWNcIixcclxuICBtb3VudGFpbjogXCJtb3VudGFpblwiLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdGhlbWVzO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lU3RhdGUge1xyXG4gIGNvbnN0cnVjdG9yKGdhbWVQbGF5KSB7XHJcbiAgICB0aGlzLmxldmVsR2FtZSA9IDE7XHJcbiAgICB0aGlzLmdhbWVQbGF5ID0gZ2FtZVBsYXk7XHJcbiAgICB0aGlzLmlzTW92ZSA9IFwidXNlclwiO1xyXG4gICAgdGhpcy5jb3VudENsaWNrID0gMDtcclxuICAgIHRoaXMudXNlclRlYW1TdXJ2aXZvcnMgPSBbXTtcclxuICAgIHRoaXMuaGlzdG9yeSA9IFtdO1xyXG4gICAgdGhpcy5wb2ludHMgPSAwO1xyXG4gICAgdGhpcy5ibG9jayA9IGZhbHNlO1xyXG4gICAgdGhpcy51c2VyVGVhbSA9IFtdO1xyXG4gICAgdGhpcy5jb21wVGVhbSA9IFtdO1xyXG4gICAgdGhpcy5hY3RpdmVDaGFyID0gbnVsbDtcclxuICAgIHRoaXMuaW5kZXhTZWxlY3QgPSBudWxsO1xyXG4gICAgdGhpcy50cmFuc2l0aW9uQ2VsbHMgPSBbXTtcclxuICAgIHRoaXMuYXR0YWNrQ2VsbHMgPSBbXTtcclxuICAgIHRoaXMuc2hvd01vZGFsID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBnZXRBbGxQbGF5ZXIoKSB7XHJcbiAgICBpZiAoIXRoaXMudXNlclRlYW0gfHwgIXRoaXMuY29tcFRlYW0pXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIml0IG11c3QgaGF2ZSAyIGFyZ3VtZW50c1wiKTtcclxuICAgIHJldHVybiBbLi4udGhpcy51c2VyVGVhbSwgLi4udGhpcy5jb21wVGVhbV07XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVTdW1Qb2ludHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VyVGVhbS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLmNoYXJhY3Rlci5oZWFsdGgsIDApO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlclBvc2l0aW9uKCkge1xyXG4gICAgY29uc3QgZm91bmRJdGVtID0gdGhpcy51c2VyVGVhbS5maW5kKChpdGVtKSA9PlxyXG4gICAgICB0aGlzLmF0dGFja0NlbGxzLmluY2x1ZGVzKGl0ZW0ucG9zaXRpb24pXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGZvdW5kSXRlbSA/IGZvdW5kSXRlbS5wb3NpdGlvbiA6IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIGZpbmRQcmVzdW1lZERlY2Vhc2VkUGxheWVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QWxsUGxheWVyKCkuZmluZChcclxuICAgICAgKGUpID0+IGUucG9zaXRpb24gPT09IHRoaXMuYWN0aXZlQ2hhclVzZXI/LnBvc2l0aW9uXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJlc3VtZWREZWNlYXNlZFBsYXllckluZm8ocG9zaXRpb24pIHtcclxuICAgIGNvbnN0IHRlYW0gPSB0aGlzLmlzTW92ZSA9PT0gXCJjb21wXCIgPyB0aGlzLnVzZXJUZWFtIDogdGhpcy5jb21wVGVhbTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpbmRleDogdGVhbS5maW5kSW5kZXgoKGl0ZW0pID0+IHBvc2l0aW9uID09PSBpdGVtLnBvc2l0aW9uKSxcclxuICAgICAgdGVhbUtleTogdGhpcy5pc01vdmUgPT09IFwiY29tcFwiID8gXCJ1c2VyVGVhbVwiIDogXCJjb21wVGVhbVwiLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldFBsYXllcihpbmRleCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QWxsUGxheWVyKCkuZmluZCgoZWwpID0+IGVsLnBvc2l0aW9uID09PSBpbmRleCk7XHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IGN1cnNvcnMgPSB7XHJcbiAgYXV0bzogXCJhdXRvXCIsXHJcbiAgcG9pbnRlcjogXCJwb2ludGVyXCIsXHJcbiAgY3Jvc3NoYWlyOiBcImNyb3NzaGFpclwiLFxyXG4gIG5vdGFsbG93ZWQ6IFwibm90LWFsbG93ZWRcIixcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGN1cnNvcnM7XHJcbiIsIi8vIGNyZWF0ZSB0d28tZGltZW5zaW9uYWwgZmllbGRcclxuZnVuY3Rpb24gZ2V0VGFibGUoY2VsbHMsIGJvYXJkU2l6ZSkge1xyXG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gIGZvciAoXHJcbiAgICBsZXQgcyA9IDAsIGUgPSBib2FyZFNpemU7XHJcbiAgICBzIDwgY2VsbHMubGVuZ3RoO1xyXG4gICAgcyArPSBib2FyZFNpemUsIGUgKz0gYm9hcmRTaXplXHJcbiAgKSB7XHJcbiAgICByZXN1bHQucHVzaChjZWxscy5zbGljZShzLCBlKSk7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEF0dGFja0NlbGxzKGNlbGxzLCBpbmRleCwgbWF4UmFuZ2UpIHtcclxuICBjb25zdCBhbGxvd2VkQ2VsbHMgPSBbXTtcclxuICBsZXQgZmluZEluZGV4O1xyXG4gIGxldCByb3c7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgcm93ID0gaTtcclxuICAgIGZpbmRJbmRleCA9IGNlbGxzW2ldLmZpbmRJbmRleCgoZWwpID0+IGVsID09PSBpbmRleCk7XHJcbiAgICBpZiAoZmluZEluZGV4ICE9PSAtMSkgYnJlYWs7XHJcbiAgfVxyXG4gIGZvciAobGV0IGkgPSAtbWF4UmFuZ2U7IGkgPD0gbWF4UmFuZ2U7IGkgKz0gMSkge1xyXG4gICAgZm9yIChsZXQgaiA9IC1tYXhSYW5nZTsgaiA8PSBtYXhSYW5nZTsgaiArPSAxKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICByb3cgKyBpID49IDAgJiZcclxuICAgICAgICBmaW5kSW5kZXggKyBqID49IDAgJiZcclxuICAgICAgICByb3cgKyBpIDwgY2VsbHMubGVuZ3RoICYmXHJcbiAgICAgICAgZmluZEluZGV4ICsgaiA8IGNlbGxzLmxlbmd0aCAmJlxyXG4gICAgICAgIGNlbGxzW3JvdyArIGldW2ZpbmRJbmRleCArIGpdICE9PSBpbmRleFxyXG4gICAgICApIHtcclxuICAgICAgICBhbGxvd2VkQ2VsbHMucHVzaChjZWxsc1tyb3cgKyBpXVtmaW5kSW5kZXggKyBqXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGFsbG93ZWRDZWxscztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkNlbGxzKGNlbGxzLCBpbmRleCwgbWF4UmFuZ2UpIHtcclxuICBjb25zdCB0cmFuc2l0Q2VsbHMgPSBbXTtcclxuICBsZXQgZmluZEluZGV4O1xyXG4gIGxldCByb3c7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgcm93ID0gaTtcclxuICAgIGZpbmRJbmRleCA9IGNlbGxzW2ldLmZpbmRJbmRleCgoZWwpID0+IGVsID09PSBpbmRleCk7XHJcbiAgICBpZiAoZmluZEluZGV4ICE9PSAtMSkgYnJlYWs7XHJcbiAgfVxyXG5cclxuICBmb3IgKGxldCBpID0gMTsgaSA8PSBtYXhSYW5nZTsgaSArPSAxKSB7XHJcbiAgICBpZiAoZmluZEluZGV4IC0gaSA+PSAwKSB7XHJcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3Jvd11bZmluZEluZGV4IC0gaV0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmaW5kSW5kZXggKyBpIDwgY2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3Jvd11bZmluZEluZGV4ICsgaV0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHJvdyArIGkgPCBjZWxscy5sZW5ndGggJiYgZmluZEluZGV4IC0gaSA+PSAwKSB7XHJcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3JvdyArIGldW2ZpbmRJbmRleCAtIGldKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocm93ICsgaSA8IGNlbGxzLmxlbmd0aCAmJiBmaW5kSW5kZXggKyBpIDwgY2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3JvdyArIGldW2ZpbmRJbmRleCArIGldKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocm93IC0gaSA+PSAwICYmIGZpbmRJbmRleCAtIGkgPj0gMCkge1xyXG4gICAgICB0cmFuc2l0Q2VsbHMucHVzaChjZWxsc1tyb3cgLSBpXVtmaW5kSW5kZXggLSBpXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJvdyAtIGkgPj0gMCAmJiBmaW5kSW5kZXggKyBpIDwgY2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3JvdyAtIGldW2ZpbmRJbmRleCArIGldKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocm93IC0gaSA+PSAwKSB7XHJcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3JvdyAtIGldW2ZpbmRJbmRleF0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyb3cgKyBpIDwgY2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3JvdyArIGldW2ZpbmRJbmRleF0pO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdHJhbnNpdENlbGxzO1xyXG59XHJcblxyXG4vLyByZXR1cm5zIGNlbGxzIGFsbG93ZWQgZm9yIGFjdGlvblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uQXR0YWNrQ2VsbHMoXHJcbiAgaW5kZXgsXHJcbiAgYm9hcmRTaXplLFxyXG4gIG1heFJhbmdlLFxyXG4gIGF0dGFjayA9IGZhbHNlXHJcbikge1xyXG4gIGNvbnN0IGFycmF5Q2VsbHMgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJvYXJkU2l6ZSAqKiAyOyBpICs9IDEpIHtcclxuICAgIGFycmF5Q2VsbHMucHVzaChpKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHRhYmxlQ2VsbHMgPSBnZXRUYWJsZShhcnJheUNlbGxzLCBib2FyZFNpemUpO1xyXG4gIGlmIChhdHRhY2spIHtcclxuICAgIHJldHVybiBnZXRBdHRhY2tDZWxscyh0YWJsZUNlbGxzLCBpbmRleCwgbWF4UmFuZ2UpO1xyXG4gIH1cclxuICByZXR1cm4gZ2V0VHJhbnNpdGlvbkNlbGxzKHRhYmxlQ2VsbHMsIGluZGV4LCBtYXhSYW5nZSk7XHJcbn1cclxuIiwiLyoqXHJcbiAqINCa0LvQsNGB0YEsINC/0YDQtdC00YHRgtCw0LLQu9GP0Y7RidC40Lkg0L/QtdGA0YHQvtC90LDQttC10Lkg0LrQvtC80LDQvdC00YtcclxuICpcclxuICogQHRvZG8g0KHQsNC80L7RgdGC0L7Rj9GC0LXQu9GM0L3QviDQv9GA0L7QtNGD0LzQsNC50YLQtSDRhdGA0LDQvdC10L3QuNC1INC/0LXRgNGB0L7QvdCw0LbQtdC5INCyINC60LvQsNGB0YHQtVxyXG4gKiDQndCw0L/RgNC40LzQtdGAXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGpzXHJcbiAqIGNvbnN0IGNoYXJhY3RlcnMgPSBbbmV3IFN3b3Jkc21hbigyKSwgbmV3IEJvd21hbigxKV1cclxuICogY29uc3QgdGVhbSA9IG5ldyBUZWFtKGNoYXJhY3RlcnMpO1xyXG4gKlxyXG4gKiB0ZWFtLmNoYXJhY3RlcnMgLy8gW3N3b3Jkc21hbiwgYm93bWFuXVxyXG4gKiBgYGBcclxuICogKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVhbSB7XHJcbiAgLy8gVE9ETzogd3JpdGUgeW91ciBsb2dpYyBoZXJlXHJcbiAgY29uc3RydWN0b3IoY2hhcmFjdGVycykge1xyXG4gICAgdGhpcy5jaGFyYWN0ZXJzID0gY2hhcmFjdGVycztcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgdXBBdHRhY2tEZWZlbmNlIH0gZnJvbSBcIi4uL3V0aWxzXCI7XHJcblxyXG4vKipcclxuICog0JHQsNC30L7QstGL0Lkg0LrQu9Cw0YHRgSwg0L7RgiDQutC+0YLQvtGA0L7Qs9C+INC90LDRgdC70LXQtNGD0Y7RgtGB0Y8g0LrQu9Cw0YHRgdGLINC/0LXRgNGB0L7QvdCw0LbQtdC5XHJcbiAqIEBwcm9wZXJ0eSBsZXZlbCAtINGD0YDQvtCy0LXQvdGMINC/0LXRgNGB0L7QvdCw0LbQsCwg0L7RgiAxINC00L4gNFxyXG4gKiBAcHJvcGVydHkgYXR0YWNrIC0g0L/QvtC60LDQt9Cw0YLQtdC70Ywg0LDRgtCw0LrQuFxyXG4gKiBAcHJvcGVydHkgZGVmZW5jZSAtINC/0L7QutCw0LfQsNGC0LXQu9GMINC30LDRidC40YLRi1xyXG4gKiBAcHJvcGVydHkgaGVhbHRoIC0g0LfQtNC+0YDQvtCy0YzQtSDQv9C10YDRgdC+0L3QsNC20LBcclxuICogQHByb3BlcnR5IHR5cGUgLSDRgdGC0YDQvtC60LAg0YEg0L7QtNC90LjQvCDQuNC3INC00L7Qv9GD0YHRgtC40LzRi9GFINC30L3QsNGH0LXQvdC40Lk6XHJcbiAqIHN3b3Jkc21hblxyXG4gKiBib3dtYW5cclxuICogbWFnaWNpYW5cclxuICogZGFlbW9uXHJcbiAqIHVuZGVhZFxyXG4gKiB2YW1waXJlXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFyYWN0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKGxldmVsLCB0eXBlID0gXCJnZW5lcmljXCIpIHtcclxuICAgIGlmIChuZXcudGFyZ2V0Lm5hbWUgPT09IFwiQ2hhcmFjdGVyXCIpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjbGFzc1wiKTtcclxuICAgIH1cclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLmxldmVsID0gbGV2ZWw7XHJcbiAgICB0aGlzLmF0dGFjayA9IDA7XHJcbiAgICB0aGlzLmRlZmVuY2UgPSAwO1xyXG4gICAgdGhpcy5oZWFsdGggPSA1MDtcclxuICB9XHJcblxyXG4gIGxldmVsVXAoKSB7XHJcbiAgICBpZiAodGhpcy5oZWFsdGggPD0gMCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBsZXZlbCB1cCBhIGRlYWQgY2hhcmFjdGVyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubGV2ZWwgPSBNYXRoLm1pbih0aGlzLmxldmVsICsgMSwgNCk7XHJcbiAgICB0aGlzLmF0dGFjayA9IHVwQXR0YWNrRGVmZW5jZSh0aGlzLmF0dGFjaywgdGhpcy5oZWFsdGgpO1xyXG4gICAgdGhpcy5kZWZlbmNlID0gdXBBdHRhY2tEZWZlbmNlKHRoaXMuZGVmZW5jZSwgdGhpcy5oZWFsdGgpO1xyXG4gICAgdGhpcy5oZWFsdGggPSBNYXRoLm1pbih0aGlzLmhlYWx0aCArIDgwLCAxMDApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3NpdGlvbmVkQ2hhcmFjdGVyIHtcclxuICBjb25zdHJ1Y3RvcihjaGFyYWN0ZXIsIHBvc2l0aW9uKSB7XHJcbiAgICB0aGlzLmNoYXJhY3RlciA9IGNoYXJhY3RlcjtcclxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIHNldCBjaGFyYWN0ZXIodmFsdWUpIHtcclxuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgQ2hhcmFjdGVyKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgXCJjaGFyYWN0ZXIgbXVzdCBiZSBpbnN0YW5jZSBvZiBDaGFyYWN0ZXIgb3IgaXRzIGNoaWxkcmVuXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2NoYXJhY3RlciA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNoYXJhY3RlcigpIHtcclxuICAgIHJldHVybiB0aGlzLl9jaGFyYWN0ZXI7XHJcbiAgfVxyXG5cclxuICBzZXQgcG9zaXRpb24odmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicG9zaXRpb24gbXVzdCBiZSBhIG51bWJlclwiKTtcclxuICAgIH1cclxuICAgIHRoaXMuX3Bvc2l0aW9uID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBnZXQgcG9zaXRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4vQ2hhcmFjdGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3dtYW4gZXh0ZW5kcyBDaGFyYWN0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKGxldmVsID0gMSkge1xyXG4gICAgc3VwZXIobGV2ZWwpO1xyXG4gICAgdGhpcy50eXBlID0gXCJib3dtYW5cIjtcclxuICAgIHRoaXMuYXR0YWNrID0gMjU7XHJcbiAgICB0aGlzLmRlZmVuY2UgPSAyNTtcclxuICAgIHRoaXMubWF4UmFuZ2UgPSAyO1xyXG4gICAgdGhpcy5tYXhBdHRhY2sgPSAyO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuL0NoYXJhY3RlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3dvcmRzbWFuIGV4dGVuZHMgQ2hhcmFjdGVyIHtcclxuICBjb25zdHJ1Y3RvcihsZXZlbCA9IDEpIHtcclxuICAgIHN1cGVyKGxldmVsKTtcclxuICAgIHRoaXMudHlwZSA9IFwic3dvcmRzbWFuXCI7XHJcbiAgICB0aGlzLmF0dGFjayA9IDQwO1xyXG4gICAgdGhpcy5kZWZlbmNlID0gMTA7XHJcbiAgICB0aGlzLm1heFJhbmdlID0gNDtcclxuICAgIHRoaXMubWF4QXR0YWNrID0gMTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi9DaGFyYWN0ZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hZ2ljaWFuIGV4dGVuZHMgQ2hhcmFjdGVyIHtcclxuICBjb25zdHJ1Y3RvcihsZXZlbCA9IDEpIHtcclxuICAgIHN1cGVyKGxldmVsKTtcclxuICAgIHRoaXMudHlwZSA9IFwibWFnaWNpYW5cIjtcclxuICAgIHRoaXMuYXR0YWNrID0gMTA7XHJcbiAgICB0aGlzLmRlZmVuY2UgPSA0MDtcclxuICAgIHRoaXMubWF4UmFuZ2UgPSAxO1xyXG4gICAgdGhpcy5tYXhBdHRhY2sgPSA0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuL0NoYXJhY3RlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGFlbW9uIGV4dGVuZHMgQ2hhcmFjdGVyIHtcclxuICBjb25zdHJ1Y3RvcihsZXZlbCA9IDEpIHtcclxuICAgIHN1cGVyKGxldmVsKTtcclxuICAgIHRoaXMudHlwZSA9IFwiZGFlbW9uXCI7XHJcbiAgICB0aGlzLmF0dGFjayA9IDEwO1xyXG4gICAgdGhpcy5kZWZlbmNlID0gMTA7XHJcbiAgICB0aGlzLm1heFJhbmdlID0gMTtcclxuICAgIHRoaXMubWF4QXR0YWNrID0gNDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi9DaGFyYWN0ZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuZGVhZCBleHRlbmRzIENoYXJhY3RlciB7XHJcbiAgY29uc3RydWN0b3IobGV2ZWwgPSAxKSB7XHJcbiAgICBzdXBlcihsZXZlbCk7XHJcbiAgICB0aGlzLnR5cGUgPSBcInVuZGVhZFwiO1xyXG4gICAgdGhpcy5hdHRhY2sgPSA0MDtcclxuICAgIHRoaXMuZGVmZW5jZSA9IDEwO1xyXG4gICAgdGhpcy5tYXhSYW5nZSA9IDQ7XHJcbiAgICB0aGlzLm1heEF0dGFjayA9IDE7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4vQ2hhcmFjdGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYW1waXJlIGV4dGVuZHMgQ2hhcmFjdGVyIHtcclxuICBjb25zdHJ1Y3RvcihsZXZlbCA9IDEpIHtcclxuICAgIHN1cGVyKGxldmVsKTtcclxuICAgIHRoaXMudHlwZSA9IFwidmFtcGlyZVwiO1xyXG4gICAgdGhpcy5hdHRhY2sgPSAyNTtcclxuICAgIHRoaXMuZGVmZW5jZSA9IDI1O1xyXG4gICAgdGhpcy5tYXhSYW5nZSA9IDI7XHJcbiAgICB0aGlzLm1heEF0dGFjayA9IDI7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGdlbmVyYXRlVGVhbSB9IGZyb20gXCIuL2dlbmVyYXRvcnNcIjtcclxuaW1wb3J0IFBvc2l0aW9uZWRDaGFyYWN0ZXIgZnJvbSBcIi4vUG9zaXRpb25lZENoYXJhY3RlclwiO1xyXG5pbXBvcnQgQm93bWFuIGZyb20gXCIuL2NoYXJhY3RlcnMvQm93bWFuXCI7XHJcbmltcG9ydCBTd29yZHNtYW4gZnJvbSBcIi4vY2hhcmFjdGVycy9Td29yZHNtYW5cIjtcclxuaW1wb3J0IE1hZ2ljaWFuIGZyb20gXCIuL2NoYXJhY3RlcnMvTWFnaWNpYW5cIjtcclxuaW1wb3J0IERhZW1vbiBmcm9tIFwiLi9jaGFyYWN0ZXJzL0RhZW1vblwiO1xyXG5pbXBvcnQgVW5kZWFkIGZyb20gXCIuL2NoYXJhY3RlcnMvVW5kZWFkXCI7XHJcbmltcG9ydCBWYW1waXJlIGZyb20gXCIuL2NoYXJhY3RlcnMvVmFtcGlyZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNob29zZVJhbmRQb3NpdGlvbnMoYm9hcmRTaXplLCBvcHBvbmVudCA9IGZhbHNlKSB7XHJcbiAgY29uc3QgY2VsbHMgPSBbXTtcclxuICBpZiAoIW9wcG9uZW50KSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvYXJkU2l6ZSAqKiAyOyBpICs9IDgpIHtcclxuICAgICAgY2VsbHMucHVzaChpKTtcclxuICAgICAgY2VsbHMucHVzaChpICsgMSk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvciAobGV0IGkgPSBib2FyZFNpemUgLSAyOyBpIDwgYm9hcmRTaXplICoqIDI7IGkgKz0gYm9hcmRTaXplKSB7XHJcbiAgICAgIGNlbGxzLnB1c2goaSk7XHJcbiAgICAgIGNlbGxzLnB1c2goaSArIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gY2VsbHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNob29zZVJhbmRQb3NpdGlvbihib2FyZFNpemUsIG9wcG9uZW50ID0gZmFsc2UpIHtcclxuICBjb25zdCBjZWxscyA9IGNob29zZVJhbmRQb3NpdGlvbnMoYm9hcmRTaXplLCBvcHBvbmVudCk7XHJcbiAgY29uc3QgcmFuZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNlbGxzLmxlbmd0aCk7XHJcbiAgcmV0dXJuIGNlbGxzW3JhbmRdO1xyXG59XHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQb3NpdGlvbnNDaGFyKFxyXG4gIHBsYXllclR5cGVzLFxyXG4gIGJvYXJkU2l6ZSxcclxuICBvcHBvbmVudCxcclxuICBbbWF4TGV2ZWwsIGNoYXJDb3VudF1cclxuKSB7XHJcbiAgY29uc3QgcG9zaXRpb25zID0gW107XHJcbiAgaWYgKG1heExldmVsID49IDQpIG1heExldmVsID0gNDtcclxuICBpZiAoY2hhckNvdW50ID49IDEwKSBjaGFyQ291bnQgPSAxMDtcclxuICBjb25zdCB0ZWFtID0gZ2VuZXJhdGVUZWFtKHBsYXllclR5cGVzLCBtYXhMZXZlbCwgY2hhckNvdW50KTtcclxuXHJcbiAgY29uc3QgcmFuZFBvc2l0aW9ucyA9IFtdO1xyXG4gIHRlYW0uY2hhcmFjdGVycy5mb3JFYWNoKChjaGFyKSA9PiB7XHJcbiAgICBsZXQgcmFuZFBvc2l0aW9uO1xyXG4gICAgbGV0IGlzUG9zaXRpb25VbmlxdWUgPSBmYWxzZTtcclxuICAgIGRvIHtcclxuICAgICAgcmFuZFBvc2l0aW9uID0gY2hvb3NlUmFuZFBvc2l0aW9uKGJvYXJkU2l6ZSwgb3Bwb25lbnQpO1xyXG4gICAgICBpZiAocmFuZFBvc2l0aW9ucy5maW5kKChlbCkgPT4gZWwgPT09IHJhbmRQb3NpdGlvbikpIHtcclxuICAgICAgICByYW5kUG9zaXRpb24gPSBjaG9vc2VSYW5kUG9zaXRpb24oYm9hcmRTaXplLCBvcHBvbmVudCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmFuZFBvc2l0aW9ucy5wdXNoKHJhbmRQb3NpdGlvbik7XHJcbiAgICAgICAgaXNQb3NpdGlvblVuaXF1ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0gd2hpbGUgKCFpc1Bvc2l0aW9uVW5pcXVlKTtcclxuICAgIHBvc2l0aW9ucy5wdXNoKG5ldyBQb3NpdGlvbmVkQ2hhcmFjdGVyKGNoYXIsIHJhbmRQb3NpdGlvbikpO1xyXG4gIH0pO1xyXG4gIHJldHVybiBwb3NpdGlvbnM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlQ2hhcihvYmopIHtcclxuICBpZiAoIW9iaikgcmV0dXJuIG51bGw7XHJcblxyXG4gIGNvbnN0IGNoYXJDbGFzc2VzID0ge1xyXG4gICAgYm93bWFuOiBCb3dtYW4sXHJcbiAgICBzd29yZHNtYW46IFN3b3Jkc21hbixcclxuICAgIG1hZ2ljaWFuOiBNYWdpY2lhbixcclxuICAgIGRhZW1vbjogRGFlbW9uLFxyXG4gICAgdW5kZWFkOiBVbmRlYWQsXHJcbiAgICB2YW1waXJlOiBWYW1waXJlLFxyXG4gIH07XHJcblxyXG4gIGNvbnN0IENoYXJDbGFzcyA9IGNoYXJDbGFzc2VzW29iai5fY2hhcmFjdGVyLnR5cGVdIHx8IG51bGw7XHJcbiAgY29uc3QgY2hhciA9IG5ldyBDaGFyQ2xhc3Mob2JqLl9jaGFyYWN0ZXIubGV2ZWwpO1xyXG4gIGNvbnN0IHJlc3RvcmVQb3NpdGlvbmVkQ2hhciA9IG5ldyBQb3NpdGlvbmVkQ2hhcmFjdGVyKGNoYXIsIG9iai5fcG9zaXRpb24pO1xyXG5cclxuICBjaGFyLmF0dGFjayA9IG9iai5fY2hhcmFjdGVyLmF0dGFjaztcclxuICBjaGFyLmhlYWx0aCA9IG9iai5fY2hhcmFjdGVyLmhlYWx0aDtcclxuICBjaGFyLmRlZmVuY2UgPSBvYmouX2NoYXJhY3Rlci5kZWZlbmNlO1xyXG5cclxuICByZXR1cm4gcmVzdG9yZVBvc2l0aW9uZWRDaGFyO1xyXG59XHJcbiIsImltcG9ydCBUZWFtIGZyb20gXCIuL1RlYW1cIjtcclxuXHJcbi8qKlxyXG4gKiDQpNC+0YDQvNC40YDRg9C10YIg0Y3QutC30LXQvNC/0LvRj9GAINC/0LXRgNGB0L7QvdCw0LbQsCDQuNC3INC80LDRgdGB0LjQstCwIGFsbG93ZWRUeXBlcyDRgdC+XHJcbiAqINGB0LvRg9GH0LDQudC90YvQvCDRg9GA0L7QstC90LXQvCDQvtGCIDEg0LTQviBtYXhMZXZlbFxyXG4gKlxyXG4gKiBAcGFyYW0gYWxsb3dlZFR5cGVzINC80LDRgdGB0LjQsiDQutC70LDRgdGB0L7QslxyXG4gKiBAcGFyYW0gbWF4TGV2ZWwg0LzQsNC60YHQuNC80LDQu9GM0L3Ri9C5INCy0L7Qt9C80L7QttC90YvQuSDRg9GA0L7QstC10L3RjCDQv9C10YDRgdC+0L3QsNC20LBcclxuICogQHJldHVybnMg0LPQtdC90LXRgNCw0YLQvtGALCDQutC+0YLQvtGA0YvQuSDQv9GA0Lgg0LrQsNC20LTQvtC8INCy0YvQt9C+0LLQtSDQstC+0LfQstGA0LDRidCw0LXRgiDQvdC+0LLRi9C5INGN0LrQt9C10LzQv9C70Y/RgCDQutC70LDRgdGB0LAg0L/QtdGA0YHQvtC90LDQttCwXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24qIGNoYXJhY3RlckdlbmVyYXRvcihhbGxvd2VkVHlwZXMsIG1heExldmVsKSB7XHJcbiAgLy8gVE9ETzogd3JpdGUgbG9naWMgaGVyZVxyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBjb25zdCByYW5kb21MZXZlbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heExldmVsICsgMSk7XHJcbiAgICBjb25zdCBSYW5kb21DbGFzcyA9XHJcbiAgICAgIGFsbG93ZWRUeXBlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbGxvd2VkVHlwZXMubGVuZ3RoKV07XHJcbiAgICB5aWVsZCBuZXcgUmFuZG9tQ2xhc3MocmFuZG9tTGV2ZWwpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqINCk0L7RgNC80LjRgNGD0LXRgiDQvNCw0YHRgdC40LIg0L/QtdGA0YHQvtC90LDQttC10Lkg0L3QsCDQvtGB0L3QvtCy0LUgY2hhcmFjdGVyR2VuZXJhdG9yXHJcbiAqIEBwYXJhbSBhbGxvd2VkVHlwZXMg0LzQsNGB0YHQuNCyINC60LvQsNGB0YHQvtCyXHJcbiAqIEBwYXJhbSBtYXhMZXZlbCDQvNCw0LrRgdC40LzQsNC70YzQvdGL0Lkg0LLQvtC30LzQvtC20L3Ri9C5INGD0YDQvtCy0LXQvdGMINC/0LXRgNGB0L7QvdCw0LbQsFxyXG4gKiBAcGFyYW0gY2hhcmFjdGVyQ291bnQg0LrQvtC70LjRh9C10YHRgtCy0L4g0L/QtdGA0YHQvtC90LDQttC10LksINC60L7RgtC+0YDQvtC1INC90YPQttC90L4g0YHRhNC+0YDQvNC40YDQvtCy0LDRgtGMXHJcbiAqIEByZXR1cm5zINGN0LrQt9C10LzQv9C70Y/RgCBUZWFtLCDRhdGA0LDQvdGP0YnQuNC5INGN0LrQt9C10LzQv9C70Y/RgNGLINC/0LXRgNGB0L7QvdCw0LbQtdC5LlxyXG4gKiDQmtC+0LvQuNGH0LXRgdGC0LLQviDQv9C10YDRgdC+0L3QsNC20LXQuSDQsiDQutC+0LzQsNC90LTQtSAtIGNoYXJhY3RlckNvdW50XHJcbiAqICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVRlYW0oYWxsb3dlZFR5cGVzLCBtYXhMZXZlbCwgY2hhcmFjdGVyQ291bnQpIHtcclxuICAvLyBUT0RPOiB3cml0ZSBsb2dpYyBoZXJlXHJcbiAgY29uc3QgY2hhcmFjdGVycyA9IFtdO1xyXG4gIGNvbnN0IHBsYXllckdlbmVyYXRvciA9IGNoYXJhY3RlckdlbmVyYXRvcihhbGxvd2VkVHlwZXMsIG1heExldmVsKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJhY3RlckNvdW50OyBpICs9IDEpIHtcclxuICAgIGNoYXJhY3RlcnMucHVzaChwbGF5ZXJHZW5lcmF0b3IubmV4dCgpLnZhbHVlKTtcclxuICB9XHJcbiAgcmV0dXJuIG5ldyBUZWFtKGNoYXJhY3RlcnMpO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBFbnRyeSBwb2ludCBvZiBhcHA6IGRvbid0IGNoYW5nZSB0aGlzXHJcbiAqL1xyXG5pbXBvcnQgR2FtZVBsYXkgZnJvbSBcIi4vR2FtZVBsYXlcIjtcclxuaW1wb3J0IEdhbWVDb250cm9sbGVyIGZyb20gXCIuL0dhbWVDb250cm9sbGVyXCI7XHJcbmltcG9ydCBHYW1lU3RhdGVTZXJ2aWNlIGZyb20gXCIuL0dhbWVTdGF0ZVNlcnZpY2VcIjtcclxuXHJcbmNvbnN0IGdhbWVQbGF5ID0gbmV3IEdhbWVQbGF5KCk7XHJcbmdhbWVQbGF5LmJpbmRUb0RPTShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dhbWUtY29udGFpbmVyXCIpKTtcclxuXHJcbmNvbnN0IHN0YXRlU2VydmljZSA9IG5ldyBHYW1lU3RhdGVTZXJ2aWNlKGxvY2FsU3RvcmFnZSk7XHJcbmNvbnN0IGdhbWVDdHJsID0gbmV3IEdhbWVDb250cm9sbGVyKGdhbWVQbGF5LCBzdGF0ZVNlcnZpY2UpO1xyXG5nYW1lQ3RybC5pbml0KCk7XHJcblxyXG4vLyBkb24ndCB3cml0ZSB5b3VyIGNvZGUgaGVyZVxyXG4iLCJpbXBvcnQgTW9kYWxQb3B1cCBmcm9tIFwiLi9Nb2RhbFBvcHVwXCI7XHJcbmltcG9ydCB7IGNhbGNIZWFsdGhMZXZlbCwgY2FsY1RpbGVUeXBlIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVQbGF5IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYm9hcmRTaXplID0gODtcclxuICAgIHRoaXMuY29udGFpbmVyID0gbnVsbDtcclxuICAgIHRoaXMuYm9hcmRFbCA9IG51bGw7XHJcbiAgICB0aGlzLmNlbGxzID0gW107XHJcbiAgICB0aGlzLmNlbGxDbGlja0xpc3RlbmVycyA9IFtdO1xyXG4gICAgdGhpcy5jZWxsRW50ZXJMaXN0ZW5lcnMgPSBbXTtcclxuICAgIHRoaXMuY2VsbExlYXZlTGlzdGVuZXJzID0gW107XHJcbiAgICB0aGlzLm5ld0dhbWVMaXN0ZW5lcnMgPSBbXTtcclxuICAgIHRoaXMuc2F2ZUdhbWVMaXN0ZW5lcnMgPSBbXTtcclxuICAgIHRoaXMubG9hZEdhbWVMaXN0ZW5lcnMgPSBbXTtcclxuICAgIHRoaXMuaXNNb2RhbCA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuaW5pdE1vZGFsTGlzdGVuZXIoKTtcclxuICB9XHJcblxyXG4gIGJpbmRUb0RPTShjb250YWluZXIpIHtcclxuICAgIGlmICghKGNvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb250YWluZXIgaXMgbm90IEhUTUxFbGVtZW50XCIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgfVxyXG5cclxuICBpbml0TW9kYWxMaXN0ZW5lcigpIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgZS50YXJnZXQuZGF0YXNldC5oYW5kbGVyID09PSBcIm1vZGFsSGFuZGxlckNhbmNlbFwiICYmXHJcbiAgICAgICAgdGhpcy5jdXJyZW50TW9kYWxcclxuICAgICAgKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TW9kYWwuaGlkZSgpO1xyXG4gICAgICAgIHRoaXMuaXNNb2RhbCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERyYXdzIGJvYXJkRWwgd2l0aCBzcGVjaWZpYyB0aGVtZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHRoZW1lXHJcbiAgICovXHJcbiAgZHJhd1VpKHRoZW1lKSB7XHJcbiAgICB0aGlzLmNoZWNrQmluZGluZygpO1xyXG5cclxuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzXCI+XHJcbiAgICAgICAgPGJ1dHRvbiBkYXRhLWlkPVwiYWN0aW9uLXJlc3RhcnRcIiBjbGFzcz1cImJ0blwiPk5ldyBHYW1lPC9idXR0b24+XHJcbiAgICAgICAgPGJ1dHRvbiBkYXRhLWlkPVwiYWN0aW9uLXNhdmVcIiBjbGFzcz1cImJ0blwiPlNhdmUgR2FtZTwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24gZGF0YS1pZD1cImFjdGlvbi1sb2FkXCIgY2xhc3M9XCJidG5cIj5Mb2FkIEdhbWU8L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJib2FyZC1jb250YWluZXJcIj5cclxuICAgICAgICA8ZGl2IGRhdGEtaWQ9XCJib2FyZFwiIGNsYXNzPVwiYm9hcmRcIj48L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgO1xyXG5cclxuICAgIHRoaXMubmV3R2FtZUVsID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcihcIltkYXRhLWlkPWFjdGlvbi1yZXN0YXJ0XVwiKTtcclxuICAgIHRoaXMuc2F2ZUdhbWVFbCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1pZD1hY3Rpb24tc2F2ZV1cIik7XHJcbiAgICB0aGlzLmxvYWRHYW1lRWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtaWQ9YWN0aW9uLWxvYWRdXCIpO1xyXG5cclxuICAgIHRoaXMubmV3R2FtZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+XHJcbiAgICAgIHRoaXMub25OZXdHYW1lQ2xpY2soZXZlbnQpXHJcbiAgICApO1xyXG4gICAgdGhpcy5zYXZlR2FtZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+XHJcbiAgICAgIHRoaXMub25TYXZlR2FtZUNsaWNrKGV2ZW50KVxyXG4gICAgKTtcclxuICAgIHRoaXMubG9hZEdhbWVFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PlxyXG4gICAgICB0aGlzLm9uTG9hZEdhbWVDbGljayhldmVudClcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5ib2FyZEVsID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcihcIltkYXRhLWlkPWJvYXJkXVwiKTtcclxuICAgIHRoaXMuYm9hcmRFbC5jbGFzc0xpc3QuYWRkKHRoZW1lKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib2FyZFNpemUgKiogMjsgaSArPSAxKSB7XHJcbiAgICAgIGNvbnN0IGNlbGxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgIGNlbGxFbC5jbGFzc0xpc3QuYWRkKFxyXG4gICAgICAgIFwiY2VsbFwiLFxyXG4gICAgICAgIFwibWFwLXRpbGVcIixcclxuICAgICAgICBgbWFwLXRpbGUtJHtjYWxjVGlsZVR5cGUoaSwgdGhpcy5ib2FyZFNpemUpfWBcclxuICAgICAgKTtcclxuICAgICAgY2VsbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIChldmVudCkgPT4gdGhpcy5vbkNlbGxFbnRlcihldmVudCkpO1xyXG4gICAgICBjZWxsRWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgKGV2ZW50KSA9PiB0aGlzLm9uQ2VsbExlYXZlKGV2ZW50KSk7XHJcbiAgICAgIGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB0aGlzLm9uQ2VsbENsaWNrKGV2ZW50KSk7XHJcbiAgICAgIHRoaXMuYm9hcmRFbC5hcHBlbmRDaGlsZChjZWxsRWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2VsbHMgPSBBcnJheS5mcm9tKHRoaXMuYm9hcmRFbC5jaGlsZHJlbik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEcmF3cyBwb3NpdGlvbnMgKHdpdGggY2hhcnMpIG9uIGJvYXJkRWxcclxuICAgKlxyXG4gICAqIEBwYXJhbSBwb3NpdGlvbnMgYXJyYXkgb2YgUG9zaXRpb25lZENoYXJhY3RlciBvYmplY3RzXHJcbiAgICovXHJcbiAgcmVkcmF3UG9zaXRpb25zKHBvc2l0aW9ucykge1xyXG4gICAgZm9yIChjb25zdCBjZWxsIG9mIHRoaXMuY2VsbHMpIHtcclxuICAgICAgY2VsbC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgcG9zaXRpb24gb2YgcG9zaXRpb25zKSB7XHJcbiAgICAgIGNvbnN0IGNlbGxFbCA9IHRoaXMuYm9hcmRFbC5jaGlsZHJlbltwb3NpdGlvbi5wb3NpdGlvbl07XHJcbiAgICAgIGNvbnN0IGNoYXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgIGNoYXJFbC5jbGFzc0xpc3QuYWRkKFwiY2hhcmFjdGVyXCIsIHBvc2l0aW9uLmNoYXJhY3Rlci50eXBlKTtcclxuXHJcbiAgICAgIGNvbnN0IGhlYWx0aEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgaGVhbHRoRWwuY2xhc3NMaXN0LmFkZChcImhlYWx0aC1sZXZlbFwiKTtcclxuXHJcbiAgICAgIGNvbnN0IGhlYWx0aEluZGljYXRvckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgaGVhbHRoSW5kaWNhdG9yRWwuY2xhc3NMaXN0LmFkZChcclxuICAgICAgICBcImhlYWx0aC1sZXZlbC1pbmRpY2F0b3JcIixcclxuICAgICAgICBgaGVhbHRoLWxldmVsLWluZGljYXRvci0ke2NhbGNIZWFsdGhMZXZlbChwb3NpdGlvbi5jaGFyYWN0ZXIuaGVhbHRoKX1gXHJcbiAgICAgICk7XHJcbiAgICAgIGhlYWx0aEluZGljYXRvckVsLnN0eWxlLndpZHRoID0gYCR7cG9zaXRpb24uY2hhcmFjdGVyLmhlYWx0aH0lYDtcclxuICAgICAgaGVhbHRoRWwuYXBwZW5kQ2hpbGQoaGVhbHRoSW5kaWNhdG9yRWwpO1xyXG4gICAgICBjaGFyRWwuYXBwZW5kQ2hpbGQoaGVhbHRoRWwpO1xyXG4gICAgICBjZWxsRWwuYXBwZW5kQ2hpbGQoY2hhckVsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNob3dNb2RhbChtZXNzYWdlLCB1bmljb2RlKSB7XHJcbiAgICBjb25zdCBtb2RhbCA9IG5ldyBNb2RhbFBvcHVwKHtcclxuICAgICAgdGl0bGU6IG1lc3NhZ2UsXHJcbiAgICAgIGNvbnRlbnQ6IGAmIyR7dW5pY29kZX1gLFxyXG4gICAgICBmb290ZXJCdXR0b25zOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgY2xhc3M6IFwiYnRuIGJ0bl9fY2FuY2VsXCIsXHJcbiAgICAgICAgICB0ZXh0OiBcIkNsb3NlXCIsXHJcbiAgICAgICAgICBoYW5kbGVyOiBcIm1vZGFsSGFuZGxlckNhbmNlbFwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRNb2RhbCA9IG1vZGFsO1xyXG5cclxuICAgIG1vZGFsLnNob3coKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBsaXN0ZW5lciB0byBtb3VzZSBlbnRlciBmb3IgY2VsbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrXHJcbiAgICovXHJcbiAgYWRkQ2VsbEVudGVyTGlzdGVuZXIoY2FsbGJhY2spIHtcclxuICAgIHRoaXMuY2VsbEVudGVyTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGxpc3RlbmVyIHRvIG1vdXNlIGxlYXZlIGZvciBjZWxsXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2FsbGJhY2tcclxuICAgKi9cclxuICBhZGRDZWxsTGVhdmVMaXN0ZW5lcihjYWxsYmFjaykge1xyXG4gICAgdGhpcy5jZWxsTGVhdmVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgbGlzdGVuZXIgdG8gbW91c2UgY2xpY2sgZm9yIGNlbGxcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAqL1xyXG4gIGFkZENlbGxDbGlja0xpc3RlbmVyKGNhbGxiYWNrKSB7XHJcbiAgICB0aGlzLmNlbGxDbGlja0xpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBsaXN0ZW5lciB0byBcIk5ldyBHYW1lXCIgYnV0dG9uIGNsaWNrXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2FsbGJhY2tcclxuICAgKi9cclxuICBhZGROZXdHYW1lTGlzdGVuZXIoY2FsbGJhY2spIHtcclxuICAgIHRoaXMubmV3R2FtZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBsaXN0ZW5lciB0byBcIlNhdmUgR2FtZVwiIGJ1dHRvbiBjbGlja1xyXG4gICAqXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrXHJcbiAgICovXHJcbiAgYWRkU2F2ZUdhbWVMaXN0ZW5lcihjYWxsYmFjaykge1xyXG4gICAgdGhpcy5zYXZlR2FtZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBsaXN0ZW5lciB0byBcIkxvYWQgR2FtZVwiIGJ1dHRvbiBjbGlja1xyXG4gICAqXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrXHJcbiAgICovXHJcbiAgYWRkTG9hZEdhbWVMaXN0ZW5lcihjYWxsYmFjaykge1xyXG4gICAgdGhpcy5sb2FkR2FtZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIG9uQ2VsbEVudGVyKGV2ZW50KSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZihldmVudC5jdXJyZW50VGFyZ2V0KTtcclxuICAgIHRoaXMuY2VsbEVudGVyTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsLCBpbmRleCkpO1xyXG4gIH1cclxuXHJcbiAgb25DZWxsTGVhdmUoZXZlbnQpIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgdGhpcy5jZWxsTGVhdmVMaXN0ZW5lcnMuZm9yRWFjaCgobykgPT4gby5jYWxsKG51bGwsIGluZGV4KSk7XHJcbiAgfVxyXG5cclxuICBvbkNlbGxDbGljayhldmVudCkge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoZXZlbnQuY3VycmVudFRhcmdldCk7XHJcbiAgICB0aGlzLmNlbGxDbGlja0xpc3RlbmVycy5mb3JFYWNoKChvKSA9PiBvLmNhbGwobnVsbCwgaW5kZXgpKTtcclxuICB9XHJcblxyXG4gIG9uTmV3R2FtZUNsaWNrKCkge1xyXG4gICAgdGhpcy5uZXdHYW1lTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsKSk7XHJcbiAgfVxyXG5cclxuICBvblNhdmVHYW1lQ2xpY2soKSB7XHJcbiAgICB0aGlzLnNhdmVHYW1lTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsKSk7XHJcbiAgfVxyXG5cclxuICBvbkxvYWRHYW1lQ2xpY2soKSB7XHJcbiAgICB0aGlzLmxvYWRHYW1lTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsKSk7XHJcbiAgfVxyXG5cclxuICBzaG93TW9kYWxNZXNzYWdlKG1lc3NhZ2UsIHVuaWNvZGUpIHtcclxuICAgIGlmICghdGhpcy5pc01vZGFsKSB7XHJcbiAgICAgIHRoaXMuaXNNb2RhbCA9IHRydWU7XHJcbiAgICAgIHRoaXMuc2hvd01vZGFsKG1lc3NhZ2UsIHVuaWNvZGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2VsZWN0Q2VsbChpbmRleCwgY29sb3IgPSBcInllbGxvd1wiKSB7XHJcbiAgICB0aGlzLmRlc2VsZWN0Q2VsbChpbmRleCk7XHJcbiAgICB0aGlzLmNlbGxzW2luZGV4XS5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIiwgYHNlbGVjdGVkLSR7Y29sb3J9YCk7XHJcbiAgfVxyXG5cclxuICBkZXNlbGVjdENlbGwoaW5kZXgpIHtcclxuICAgIGNvbnN0IGNlbGwgPSB0aGlzLmNlbGxzW2luZGV4XTtcclxuXHJcbiAgICBpZiAoY2VsbCkge1xyXG4gICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgICAgLi4uQXJyYXkuZnJvbShjZWxsLmNsYXNzTGlzdCkuZmlsdGVyKChvKSA9PiBvLnN0YXJ0c1dpdGgoXCJzZWxlY3RlZFwiKSlcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNob3dDZWxsVG9vbHRpcChtZXNzYWdlLCBpbmRleCkge1xyXG4gICAgdGhpcy5jZWxsc1tpbmRleF0udGl0bGUgPSBtZXNzYWdlO1xyXG4gIH1cclxuXHJcbiAgaGlkZUNlbGxUb29sdGlwKGluZGV4KSB7XHJcbiAgICB0aGlzLmNlbGxzW2luZGV4XS50aXRsZSA9IFwiXCI7XHJcbiAgfVxyXG5cclxuICBzaG93RGFtYWdlKGluZGV4LCBkYW1hZ2UpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBjb25zdCBjZWxsID0gdGhpcy5jZWxsc1tpbmRleF07XHJcbiAgICAgIGNvbnN0IGRhbWFnZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgIGRhbWFnZUVsLmNsYXNzTmFtZSA9IFwiZGFtYWdlXCI7XHJcbiAgICAgIGRhbWFnZUVsLnRleHRDb250ZW50ID0gZGFtYWdlO1xyXG4gICAgICBjZWxsLmFwcGVuZENoaWxkKGRhbWFnZUVsKTtcclxuXHJcbiAgICAgIGRhbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGNlbGwucmVtb3ZlQ2hpbGQoZGFtYWdlRWwpO1xyXG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRDdXJzb3IoY3Vyc29yKSB7XHJcbiAgICB0aGlzLmJvYXJkRWwuc3R5bGUuY3Vyc29yID0gY3Vyc29yO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tCaW5kaW5nKCkge1xyXG4gICAgaWYgKHRoaXMuY29udGFpbmVyID09PSBudWxsKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkdhbWVQbGF5IG5vdCBiaW5kIHRvIERPTVwiKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVN0YXRlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3Ioc3RvcmFnZSkge1xyXG4gICAgdGhpcy5zdG9yYWdlID0gc3RvcmFnZTtcclxuICB9XHJcblxyXG4gIHNhdmUoc3RhdGUpIHtcclxuICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKFwic3RhdGVcIiwgSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcclxuICB9XHJcblxyXG4gIGxvYWQoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLnN0b3JhZ2UuZ2V0SXRlbShcInN0YXRlXCIpKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdGF0ZVwiKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHRoZW1lcyBmcm9tIFwiLi90aGVtZXNcIjtcclxuaW1wb3J0IEdhbWVTdGF0ZSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IGN1cnNvcnMgZnJvbSBcIi4vY3Vyc29yc1wiO1xyXG5pbXBvcnQgZ2V0VHJhbnNpdGlvbkF0dGFja0NlbGxzIGZyb20gXCIuL3RyYW5zaXRpb25BdHRhY2tDZWxsc1wiO1xyXG5pbXBvcnQgY3JlYXRlUG9zaXRpb25zQ2hhciwge1xyXG4gIGNob29zZVJhbmRQb3NpdGlvbnMsXHJcbiAgcmVzdG9yZUNoYXIsXHJcbn0gZnJvbSBcIi4vY3JlYXRlUG9zaXRpb25zXCI7XHJcbmltcG9ydCB7XHJcbiAgY2FsY3VsYXRlRGFtYWdlLFxyXG4gIGdldEluZm8sXHJcbiAgZ2V0UmFuZG9tQ2hhcmFjdGVyLFxyXG4gIG92ZXJ3cml0ZVByb3BlcnRpZXMsXHJcbiAgcmVzdG9yZUNoYXJhY3RlcnMsXHJcbn0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IEJvd21hbiBmcm9tIFwiLi9jaGFyYWN0ZXJzL0Jvd21hblwiO1xyXG5pbXBvcnQgU3dvcmRzbWFuIGZyb20gXCIuL2NoYXJhY3RlcnMvU3dvcmRzbWFuXCI7XHJcbmltcG9ydCBNYWdpY2lhbiBmcm9tIFwiLi9jaGFyYWN0ZXJzL01hZ2ljaWFuXCI7XHJcbmltcG9ydCBWYW1waXJlIGZyb20gXCIuL2NoYXJhY3RlcnMvVmFtcGlyZVwiO1xyXG5pbXBvcnQgRGFlbW9uIGZyb20gXCIuL2NoYXJhY3RlcnMvRGFlbW9uXCI7XHJcbmltcG9ydCBVbmRlYWQgZnJvbSBcIi4vY2hhcmFjdGVycy9VbmRlYWRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDb250cm9sbGVyIHtcclxuICBjb25zdHJ1Y3RvcihnYW1lUGxheSwgc3RhdGVTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLmdhbWVQbGF5ID0gZ2FtZVBsYXk7XHJcbiAgICB0aGlzLnN0YXRlU2VydmljZSA9IHN0YXRlU2VydmljZTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlID0gbmV3IEdhbWVTdGF0ZSh0aGlzLmdhbWVQbGF5KTtcclxuXHJcbiAgICB0aGlzLm9uQ2VsbENsaWNrID0gdGhpcy5vbkNlbGxDbGljay5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbkNlbGxFbnRlciA9IHRoaXMub25DZWxsRW50ZXIuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25DZWxsTGVhdmUgPSB0aGlzLm9uQ2VsbExlYXZlLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLm5ld0dhbWUgPSB0aGlzLm5ld0dhbWUuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuc2F2ZUdhbWUgPSB0aGlzLnNhdmVHYW1lLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmxvYWRHYW1lID0gdGhpcy5sb2FkR2FtZS5iaW5kKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuZXZlbnRzKCk7XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgLy8gVE9ETzogYWRkIGV2ZW50IGxpc3RlbmVycyB0byBnYW1lUGxheSBldmVudHNcclxuICAgIC8vIFRPRE86IGxvYWQgc2F2ZWQgc3RhdGVkIGZyb20gc3RhdGVTZXJ2aWNlXHJcbiAgICB0aGlzLmluaXROZXdUZWFtcygpO1xyXG4gICAgdGhpcy51cGRhdGVQaWN0dXJlKCk7XHJcbiAgfVxyXG5cclxuICBldmVudHMoKSB7XHJcbiAgICB0aGlzLmdhbWVQbGF5LmFkZENlbGxFbnRlckxpc3RlbmVyKHRoaXMub25DZWxsRW50ZXIpO1xyXG4gICAgdGhpcy5nYW1lUGxheS5hZGRDZWxsTGVhdmVMaXN0ZW5lcih0aGlzLm9uQ2VsbExlYXZlKTtcclxuICAgIHRoaXMuZ2FtZVBsYXkuYWRkQ2VsbENsaWNrTGlzdGVuZXIodGhpcy5vbkNlbGxDbGljayk7XHJcbiAgICB0aGlzLmdhbWVQbGF5LmFkZE5ld0dhbWVMaXN0ZW5lcih0aGlzLm5ld0dhbWUpO1xyXG4gICAgdGhpcy5nYW1lUGxheS5hZGRTYXZlR2FtZUxpc3RlbmVyKHRoaXMuc2F2ZUdhbWUpO1xyXG4gICAgdGhpcy5nYW1lUGxheS5hZGRMb2FkR2FtZUxpc3RlbmVyKHRoaXMubG9hZEdhbWUpO1xyXG4gIH1cclxuXHJcbiAgbmV3R2FtZSgpIHtcclxuICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgIGxldmVsR2FtZTogMSxcclxuICAgICAgY291bnRDbGljazogMCxcclxuICAgICAgaGlzdG9yeTogW1xyXG4gICAgICAgIC4uLnRoaXMuZ2FtZVN0YXRlLmhpc3RvcnksXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbGV2ZWxHYW1lOiB0aGlzLmdhbWVTdGF0ZS5sZXZlbEdhbWUsXHJcbiAgICAgICAgICBwb2ludHM6IHRoaXMuZ2FtZVN0YXRlLnBvaW50cyxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgICBpc01vdmU6IFwidXNlclwiLFxyXG4gICAgICBibG9jazogZmFsc2UsXHJcbiAgICAgIHBvaW50czogMCxcclxuICAgIH07XHJcblxyXG4gICAgb3ZlcndyaXRlUHJvcGVydGllcyh0aGlzLmdhbWVTdGF0ZSwgZGF0YSk7XHJcblxyXG4gICAgdGhpcy5yZXNldCgpO1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICBzYXZlR2FtZSgpIHtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLmF0dGFja0NlbGxzID0gW107XHJcbiAgICB0aGlzLmdhbWVTdGF0ZS50cmFuc2l0aW9uQ2VsbHMgPSBbXTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXJVc2VyID0gbnVsbDtcclxuICAgIHRoaXMuc3RhdGVTZXJ2aWNlLnNhdmUodGhpcy5nYW1lU3RhdGUpO1xyXG4gICAgdGhpcy5nYW1lUGxheS5zaG93TW9kYWxNZXNzYWdlKFwiWW91ciBnYW1lIGhhcyBzYXZlZCFcIiwgXCI5OTk3XCIpO1xyXG4gIH1cclxuXHJcbiAgbG9hZEdhbWUoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBzYXZlZEdhbWVTdGF0ZSA9IHRoaXMuc3RhdGVTZXJ2aWNlLmxvYWQoKTtcclxuICAgICAgdGhpcy5yZXN0b3JlR2FtZVN0YXRlKHNhdmVkR2FtZVN0YXRlKTtcclxuICAgICAgdGhpcy5yZXN0b3JlQWN0aXZlQ2hhcmFjdGVyKHNhdmVkR2FtZVN0YXRlLmFjdGl2ZUNoYXIpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVBpY3R1cmUoKTtcclxuICAgICAgdGhpcy5zaG93R2FtZUluZm8oKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdGhpcy5oYW5kbGVMb2FkaW5nRXJyb3IoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlc3RvcmVHYW1lU3RhdGUoc2F2ZWRTdGF0ZSkge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBsZXZlbEdhbWUsXHJcbiAgICAgIGNvdW50Q2xpY2ssXHJcbiAgICAgIGhpc3RvcnksXHJcbiAgICAgIGlzTW92ZSxcclxuICAgICAgYmxvY2ssXHJcbiAgICAgIHBvaW50cyxcclxuICAgICAgaW5kZXhTZWxlY3QsXHJcbiAgICB9ID0gc2F2ZWRTdGF0ZTtcclxuXHJcbiAgICBvdmVyd3JpdGVQcm9wZXJ0aWVzKHRoaXMuZ2FtZVN0YXRlLCB7XHJcbiAgICAgIGxldmVsR2FtZTogYmxvY2sgPyBsZXZlbEdhbWUgLSAxIDogbGV2ZWxHYW1lLFxyXG4gICAgICBjb3VudENsaWNrLFxyXG4gICAgICBoaXN0b3J5LFxyXG4gICAgICBpc01vdmUsXHJcbiAgICAgIGJsb2NrLFxyXG4gICAgICBwb2ludHMsXHJcbiAgICAgIGluZGV4U2VsZWN0LFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5yZXNldFRlYW1zKHNhdmVkU3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgcmVzdG9yZUFjdGl2ZUNoYXJhY3RlcihzYXZlZEFjdGl2ZUNoYXIpIHtcclxuICAgIGNvbnN0IHJlc3RhcnRlZEFjdGl2ZUNoYXIgPSByZXN0b3JlQ2hhcihzYXZlZEFjdGl2ZUNoYXIpO1xyXG4gICAgaWYgKHJlc3RhcnRlZEFjdGl2ZUNoYXIgJiYgcmVzdGFydGVkQWN0aXZlQ2hhci5pc01vdmUgPT09IFwidXNlclwiKSB7XHJcbiAgICAgIHRoaXMucmVhY3RPbkNsaWNrKHJlc3RhcnRlZEFjdGl2ZUNoYXIsIFtcclxuICAgICAgICBcImJvd21hblwiLFxyXG4gICAgICAgIFwic3dvcmRzbWFuXCIsXHJcbiAgICAgICAgXCJtYWdpY2lhblwiLFxyXG4gICAgICBdKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZUxvYWRpbmdFcnJvcigpIHtcclxuICAgIHRoaXMuZ2FtZVBsYXkuc2hvd01vZGFsTWVzc2FnZShcIlRoZXJlJ3Mgbm8gZ2FtZSBpbiBtZW1vcnlcIiwgXCIxMjgwNzVcIik7XHJcbiAgICB0aGlzLm5ld0dhbWUoKTtcclxuICB9XHJcblxyXG4gIGluaXROZXdUZWFtcygpIHtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtID0gdGhpcy5nZXRVc2VyVGVhbShbXHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSxcclxuICAgICAgdGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lLFxyXG4gICAgXSk7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbSA9IHRoaXMuZ2V0Q29tcFRlYW0oW1xyXG4gICAgICB0aGlzLmdhbWVTdGF0ZS5sZXZlbEdhbWUsXHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSxcclxuICAgIF0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlclRlYW0oW21heExldmVsLCBjaGFyQ291bnRdKSB7XHJcbiAgICBjb25zdCB1c2VyVHlwZXMgPSBbQm93bWFuLCBTd29yZHNtYW4sIE1hZ2ljaWFuXTtcclxuICAgIGNvbnN0IHVzZXJUZWFtID0gY3JlYXRlUG9zaXRpb25zQ2hhcihcclxuICAgICAgdXNlclR5cGVzLFxyXG4gICAgICB0aGlzLmdhbWVQbGF5LmJvYXJkU2l6ZSxcclxuICAgICAgZmFsc2UsXHJcbiAgICAgIFttYXhMZXZlbCwgY2hhckNvdW50XVxyXG4gICAgKTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtID0gdXNlclRlYW07XHJcbiAgICByZXR1cm4gdXNlclRlYW07XHJcbiAgfVxyXG5cclxuICBnZXRDb21wVGVhbShbbWF4TGV2ZWwsIGNoYXJDb3VudF0pIHtcclxuICAgIGNvbnN0IGNvbXBUeXBlcyA9IFtWYW1waXJlLCBEYWVtb24sIFVuZGVhZF07XHJcbiAgICBjb25zdCBjb21wVGVhbSA9IGNyZWF0ZVBvc2l0aW9uc0NoYXIoXHJcbiAgICAgIGNvbXBUeXBlcyxcclxuICAgICAgdGhpcy5nYW1lUGxheS5ib2FyZFNpemUsXHJcbiAgICAgIHRydWUsXHJcbiAgICAgIFttYXhMZXZlbCwgY2hhckNvdW50XVxyXG4gICAgKTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLmNvbXBUZWFtID0gY29tcFRlYW07XHJcbiAgICByZXR1cm4gY29tcFRlYW07XHJcbiAgfVxyXG5cclxuICByZXNldFRlYW1zKGdhbWVTdGF0ZSkge1xyXG4gICAgdGhpcy5nYW1lU3RhdGUudXNlclRlYW0gPSByZXN0b3JlQ2hhcmFjdGVycyhcclxuICAgICAgZ2FtZVN0YXRlLnVzZXJUZWFtLFxyXG4gICAgICByZXN0b3JlQ2hhclxyXG4gICAgKTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLmNvbXBUZWFtID0gcmVzdG9yZUNoYXJhY3RlcnMoXHJcbiAgICAgIGdhbWVTdGF0ZS5jb21wVGVhbSxcclxuICAgICAgcmVzdG9yZUNoYXJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBsZXZlbFVwKCkge1xyXG4gICAgY29uc3QgdGhlbWVWYWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoZW1lcyk7XHJcblxyXG4gICAgdGhpcy51cGRhdGVUZWFtcygpO1xyXG4gICAgdGhpcy5nYW1lU3RhdGVcclxuICAgICAgLmdldEFsbFBsYXllcigpXHJcbiAgICAgIC5mb3JFYWNoKChwbGF5ZXIpID0+IHBsYXllci5jaGFyYWN0ZXIubGV2ZWxVcCgpKTtcclxuICAgIHRoaXMuZ2FtZVBsYXkuZHJhd1VpKFxyXG4gICAgICB0aGVtZVZhbHVlc1sodGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lIC0gMSkgJSB0aGVtZVZhbHVlcy5sZW5ndGhdXHJcbiAgICApO1xyXG4gICAgdGhpcy5nYW1lU3RhdGUuY291bnRDbGljayA9IDA7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVUZWFtcygpIHtcclxuICAgIGNvbnN0IG5ld1VzZXJUZWFtID0gdGhpcy5nZXRVc2VyVGVhbShbXHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSAtIDEsXHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSxcclxuICAgIF0pO1xyXG4gICAgY29uc3QgYWxsU3RhcnRQb3NpdGlvbnMgPSBjaG9vc2VSYW5kUG9zaXRpb25zKHRoaXMuZ2FtZVBsYXkuYm9hcmRTaXplKTtcclxuICAgIG5ld1VzZXJUZWFtLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgYWxsU3RhcnRQb3NpdGlvbnMuc3BsaWNlKGFsbFN0YXJ0UG9zaXRpb25zLmluZGV4T2YoaXRlbS5wb3NpdGlvbiksIDEpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5nYW1lU3RhdGUudXNlclRlYW1TdXJ2aXZvcnMuZm9yRWFjaCgoc3Vydml2b3IpID0+IHtcclxuICAgICAgaWYgKCFhbGxTdGFydFBvc2l0aW9ucy5pbmNsdWRlcyhzdXJ2aXZvci5wb3NpdGlvbikpIHtcclxuICAgICAgICBjb25zdCBuZXdQb3NpdGlvbiA9XHJcbiAgICAgICAgICBhbGxTdGFydFBvc2l0aW9uc1tcclxuICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxsU3RhcnRQb3NpdGlvbnMubGVuZ3RoKVxyXG4gICAgICAgICAgXTtcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cclxuICAgICAgICBzdXJ2aXZvci5wb3NpdGlvbiA9IG5ld1Bvc2l0aW9uO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmdhbWVTdGF0ZS51c2VyVGVhbSA9XHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtU3Vydml2b3JzLmNvbmNhdChuZXdVc2VyVGVhbSk7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZS51c2VyVGVhbVN1cnZpdm9ycyA9IFtdO1xyXG4gICAgdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0gPSB0aGlzLmdldENvbXBUZWFtKFtcclxuICAgICAgdGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lIC0gMSxcclxuICAgICAgdGhpcy5nYW1lU3RhdGUudXNlclRlYW0ubGVuZ3RoLFxyXG4gICAgXSk7XHJcbiAgfVxyXG5cclxuICBzaG93R2FtZUluZm8oKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5nYW1lU3RhdGUucG9pbnRzXHJcbiAgICAgID8gYFlvdXIgbGV2ZWwgJHt0aGlzLmdhbWVTdGF0ZS5sZXZlbEdhbWV9IGFuZCBwb2ludHMgJHt0aGlzLmdhbWVTdGF0ZS5wb2ludHN9YFxyXG4gICAgICA6IFwiVGhlcmUncyBubyBwb2ludHMuIFxcbiBJdCdzIHRoZSBmaXJzdCByb3VuZFwiO1xyXG4gICAgY29uc3QgaWNvbkNvZGUgPSB0aGlzLmdhbWVTdGF0ZS5wb2ludHMgPyBcIjEyODA3NlwiIDogXCIxMjgwODNcIjtcclxuXHJcbiAgICB0aGlzLmdhbWVQbGF5LnNob3dNb2RhbE1lc3NhZ2UobWVzc2FnZSwgaWNvbkNvZGUpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25DZWxsQ2xpY2soaW5kZXgpIHtcclxuICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5ibG9jaykgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHBsYXllciA9IHRoaXMuZ2FtZVN0YXRlXHJcbiAgICAgIC5nZXRBbGxQbGF5ZXIoKVxyXG4gICAgICAuZmluZCgoZWwpID0+IGVsLnBvc2l0aW9uID09PSBpbmRleCk7XHJcblxyXG4gICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXIpIHtcclxuICAgICAgYXdhaXQgdGhpcy5oYW5kbGVVc2VyVHVybihpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZWFjdE9uQ2xpY2socGxheWVyLCBbXCJib3dtYW5cIiwgXCJzd29yZHNtYW5cIiwgXCJtYWdpY2lhblwiXSk7XHJcblxyXG4gICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmNvdW50Q2xpY2sgPj0gMSkge1xyXG4gICAgICBhd2FpdCB0aGlzLmhhbmRsZUNvbXB1dGVyVHVybigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgaGFuZGxlVXNlclR1cm4oaW5kZXgpIHtcclxuICAgIGlmICghdGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QpIHJldHVybjtcclxuXHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QuZ3JlZW4gPT09IGluZGV4KSB7XHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXIucG9zaXRpb24gPSBpbmRleDtcclxuICAgICAgdGhpcy5nYW1lU3RhdGUuY291bnRDbGljayArPSAxO1xyXG4gICAgICB0aGlzLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS5nZXRBbGxQbGF5ZXIoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LnJlZCA9PT0gaW5kZXgpIHtcclxuICAgICAgdGhpcy5nYW1lU3RhdGUuaXNNb3ZlID0gXCJ1c2VyXCI7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRG9EYW1hZ2UgPSBhd2FpdCB0aGlzLmRvRGFtYWdlKGluZGV4KTtcclxuICAgICAgaWYgKHJlc3BvbnNlRG9EYW1hZ2UpIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jb3VudENsaWNrICs9IDE7XHJcbiAgICAgICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUuZ2V0QWxsUGxheWVyKCkpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY2hlY2tHYW1lUHJvZ3Jlc3MoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgY2hlY2tHYW1lUHJvZ3Jlc3MoKSB7XHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUuY29tcFRlYW0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSArPSAxO1xyXG4gICAgICB0aGlzLmdhbWVTdGF0ZS5wb2ludHMgKz0gdGhpcy5nYW1lU3RhdGUuY2FsY3VsYXRlU3VtUG9pbnRzKCk7XHJcbiAgICAgIHRoaXMucmVzZXQoKTtcclxuXHJcbiAgICAgIC8vIFVuY29tbWVudCB0aGUgZm9sbG93aW5nIGlmIHlvdSB3YW50IHRvIGhhbmRsZSBnYW1lIGVuZGluZ1xyXG4gICAgICAvLyBhd2FpdCB0aGlzLmNoZWNrR2FtZU92ZXIoKTtcclxuXHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtU3Vydml2b3JzID0gdGhpcy5nYW1lU3RhdGUudXNlclRlYW07XHJcbiAgICAgIHRoaXMuZ2FtZVBsYXkuc2hvd01vZGFsTWVzc2FnZShcclxuICAgICAgICBgTGV2ZWwgdXAhIFlvdXIgbGV2ZWwgJHt0aGlzLmdhbWVTdGF0ZS5sZXZlbEdhbWV9IGFuZCB0b3RhbCBwb2ludHMgYXJlICR7dGhpcy5nYW1lU3RhdGUucG9pbnRzfWAsXHJcbiAgICAgICAgXCI5OTk2XCJcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5sZXZlbFVwKCk7XHJcbiAgICAgIHRoaXMuZ2FtZVBsYXkucmVkcmF3UG9zaXRpb25zKHRoaXMuZ2FtZVN0YXRlLmdldEFsbFBsYXllcigpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFVuY29tbWVudCB0aGUgZm9sbG93aW5nIGlmIHlvdSB3YW50IHRvIGhhbmRsZSBnYW1lIGVuZGluZ1xyXG4gIC8vIGFzeW5jIGNoZWNrR2FtZU92ZXIoKSB7XHJcbiAgLy8gICBpZiAodGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lID49IDUpIHtcclxuICAvLyAgICAgdGhpcy5nYW1lU3RhdGUucG9pbnQgPSB0aGlzLmdhbWVTdGF0ZS5jYWxjdWxhdGVTdW1Qb2ludHMoKTtcclxuICAvLyAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2sgPSB0cnVlO1xyXG4gIC8vICAgICB0aGlzLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIpO1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXHJcbiAgLy8gICAgIHRoaXMuZ2FtZVBsYXkuc2hvd01vZGFsTWVzc2FnZShgWW91IHdpbiEgWW91ciBwb2ludHMgYXJlICR7dGhpcy5nYW1lU3RhdGUucG9pbnR9YCwgJzEyNzg4MScpO1xyXG4gIC8vICAgICByZXR1cm47XHJcbiAgLy8gICB9XHJcbiAgLy8gfVxyXG5cclxuICBhc3luYyBoYW5kbGVDb21wdXRlclR1cm4oKSB7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyVXNlciA9IHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXI7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZS5pc01vdmUgPSBcImNvbXBcIjtcclxuICAgIGNvbnN0IHJlc3BvbnNlRG9BdHRhY2tDb21wID0gYXdhaXQgdGhpcy5kb0F0dGFja0NvbXAodGhpcyk7XHJcbiAgICBpZiAocmVzcG9uc2VEb0F0dGFja0NvbXApIHtcclxuICAgICAgdGhpcy5nYW1lU3RhdGUuY291bnRDbGljayA9IDA7XHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmlzTW92ZSA9IFwidXNlclwiO1xyXG5cclxuICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmZpbmRQcmVzdW1lZERlY2Vhc2VkUGxheWVyKCkpIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyID0gdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhclVzZXI7XHJcbiAgICAgICAgdGhpcy5yZWFjdE9uQ2xpY2sodGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhciwgW1xyXG4gICAgICAgICAgXCJib3dtYW5cIixcclxuICAgICAgICAgIFwic3dvcmRzbWFuXCIsXHJcbiAgICAgICAgICBcIm1hZ2ljaWFuXCIsXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUuZ2V0QWxsUGxheWVyKCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNlbGxFbnRlcihpbmRleCkge1xyXG4gICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmJsb2NrKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgcGxheWVyID0gdGhpcy5nYW1lU3RhdGUuZ2V0UGxheWVyKGluZGV4KTtcclxuICAgIGlmIChwbGF5ZXIpIHtcclxuICAgICAgdGhpcy5nYW1lUGxheS5zaG93Q2VsbFRvb2x0aXAoZ2V0SW5mbyhwbGF5ZXIuY2hhcmFjdGVyKSwgaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhcikgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGlzVHJhbnNpdGlvbkNlbGwgPSB0aGlzLmdhbWVTdGF0ZS50cmFuc2l0aW9uQ2VsbHMuaW5jbHVkZXMoaW5kZXgpO1xyXG4gICAgY29uc3QgaXNBdHRhY2tDZWxsID0gdGhpcy5nYW1lU3RhdGUuYXR0YWNrQ2VsbHMuaW5jbHVkZXMoaW5kZXgpO1xyXG4gICAgY29uc3QgaXNVc2VyQ2VsbCA9IHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtLnNvbWUoXHJcbiAgICAgIChpdGVtKSA9PiBpdGVtLnBvc2l0aW9uID09PSBpbmRleFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGlzQ29tcENlbGwgPSB0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbS5zb21lKFxyXG4gICAgICAoaXRlbSkgPT4gaXRlbS5wb3NpdGlvbiA9PT0gaW5kZXhcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5nYW1lUGxheS5zZXRDdXJzb3IoY3Vyc29ycy5wb2ludGVyKTtcclxuXHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QpIHtcclxuICAgICAgaWYgKGlzVHJhbnNpdGlvbkNlbGwgJiYgIWlzVXNlckNlbGwgJiYgIWlzQ29tcENlbGwpIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC5ncmVlbiA9IGluZGV4O1xyXG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuc2VsZWN0Q2VsbChpbmRleCwgXCJncmVlblwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzQXR0YWNrQ2VsbCAmJiBpc0NvbXBDZWxsKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QucmVkID0gaW5kZXg7XHJcbiAgICAgICAgdGhpcy5nYW1lUGxheS5zZWxlY3RDZWxsKGluZGV4LCBcInJlZFwiKTtcclxuICAgICAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLmNyb3NzaGFpcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uQ2VsbExlYXZlKGluZGV4KSB7XHJcbiAgICB0aGlzLmdhbWVQbGF5LmhpZGVDZWxsVG9vbHRpcChpbmRleCk7XHJcblxyXG4gICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmJsb2NrKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgaGFzU2VsZWN0ZWRHcmVlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VsZWN0ZWQtZ3JlZW5cIik7XHJcbiAgICBjb25zdCBpc0F0dGFja0NlbGwgPSB0aGlzLmdhbWVTdGF0ZS5hdHRhY2tDZWxscz8uaW5jbHVkZXMoaW5kZXgpO1xyXG4gICAgY29uc3QgaXNDb21wVGVhbVBvc2l0aW9uID0gdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0uc29tZShcclxuICAgICAgKGl0ZW0pID0+IGl0ZW0ucG9zaXRpb24gPT09IGluZGV4XHJcbiAgICApO1xyXG5cclxuICAgIGlmIChoYXNTZWxlY3RlZEdyZWVuKSB7XHJcbiAgICAgIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LmdyZWVuKTtcclxuXHJcbiAgICAgIGlmICghaXNBdHRhY2tDZWxsICYmIGlzQ29tcFRlYW1Qb3NpdGlvbikge1xyXG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LmdyZWVuKTtcclxuICAgICAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLm5vdGFsbG93ZWQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VsZWN0ZWQtcmVkXCIpKSB7XHJcbiAgICAgIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LnJlZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWFjdE9uQ2xpY2socGxheWVyLCBhcnJheVR5cGVzKSB7XHJcbiAgICBpZiAoIXBsYXllcikgcmV0dXJuO1xyXG5cclxuICAgIGlmIChhcnJheVR5cGVzLmluY2x1ZGVzKHBsYXllci5jaGFyYWN0ZXIudHlwZSkpIHtcclxuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZENlbGwocGxheWVyLnBvc2l0aW9uKTtcclxuICAgICAgdGhpcy5nYW1lUGxheS5zZWxlY3RDZWxsKHBsYXllci5wb3NpdGlvbik7XHJcblxyXG4gICAgICB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyID0gcGxheWVyO1xyXG4gICAgICBjb25zdCB7IG1heFJhbmdlLCBtYXhBdHRhY2sgfSA9IHBsYXllci5jaGFyYWN0ZXI7XHJcblxyXG4gICAgICB0aGlzLmdhbWVTdGF0ZS50cmFuc2l0aW9uQ2VsbHMgPSBnZXRUcmFuc2l0aW9uQXR0YWNrQ2VsbHMoXHJcbiAgICAgICAgcGxheWVyLnBvc2l0aW9uLFxyXG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuYm9hcmRTaXplLFxyXG4gICAgICAgIG1heFJhbmdlXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmF0dGFja0NlbGxzID0gZ2V0VHJhbnNpdGlvbkF0dGFja0NlbGxzKFxyXG4gICAgICAgIHBsYXllci5wb3NpdGlvbixcclxuICAgICAgICB0aGlzLmdhbWVQbGF5LmJvYXJkU2l6ZSxcclxuICAgICAgICBtYXhBdHRhY2ssXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5oYW5kbGVJbnZhbGlkU2VsZWN0aW9uKHBsYXllci5wb3NpdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGVTZWxlY3RlZENlbGwobnVtKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0ICYmXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VsZWN0ZWQteWVsbG93XCIpXHJcbiAgICApIHtcclxuICAgICAgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QueWVsbG93KTtcclxuICAgIH1cclxuICAgIHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0ID0geyB5ZWxsb3c6IG51bSB9O1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlSW52YWxpZFNlbGVjdGlvbihudW0pIHtcclxuICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSB0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdDtcclxuICAgIGNvbnN0IGlzTm90SW5BdHRhY2tDZWxscyA9ICF0aGlzLmdhbWVTdGF0ZS5hdHRhY2tDZWxscy5pbmNsdWRlcyhudW0pO1xyXG4gICAgY29uc3QgaXNDb21wdXRlclRlYW1Qb3NpdGlvbiA9IHRoaXMuZ2FtZVN0YXRlLmNvbXBUZWFtLnNvbWUoXHJcbiAgICAgIChpdGVtKSA9PiBpdGVtLnBvc2l0aW9uID09PSBudW1cclxuICAgICk7XHJcblxyXG4gICAgaWYgKGlzU2VsZWN0ZWQgJiYgaXNOb3RJbkF0dGFja0NlbGxzICYmIGlzQ29tcHV0ZXJUZWFtUG9zaXRpb24pIHtcclxuICAgICAgdGhpcy5nYW1lUGxheS5zaG93TW9kYWxNZXNzYWdlKFwiSXQgY2FuJ3QgYmUgZG9uZVwiLCBcIjk5NDBcIik7XHJcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyKSB7XHJcbiAgICAgIHRoaXMuZ2FtZVBsYXkuc2hvd01vZGFsTWVzc2FnZShcIlRoaXMgaXNuYHQgeW91ciBjaGFyYWN0ZXJcIiwgXCI5OTk1XCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZG9EYW1hZ2UoaW5kZXgpIHtcclxuICAgIGNvbnN0IHsgYXR0YWNrIH0gPSB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyLmNoYXJhY3RlcjtcclxuICAgIGNvbnN0IG9wcG9uZW50ID0gdGhpcy5nYW1lU3RhdGUuZ2V0UGxheWVyKGluZGV4KTtcclxuICAgIGNvbnN0IHsgZGVmZW5jZSwgaGVhbHRoIH0gPSBvcHBvbmVudC5jaGFyYWN0ZXI7XHJcblxyXG4gICAgY29uc3QgZGFtYWdlID0gY2FsY3VsYXRlRGFtYWdlKGF0dGFjaywgZGVmZW5jZSk7XHJcbiAgICBjb25zdCByZXNwb25zZVNob3dEYW1hZ2UgPSBhd2FpdCB0aGlzLmdhbWVQbGF5LnNob3dEYW1hZ2UoaW5kZXgsIGRhbWFnZSk7XHJcblxyXG4gICAgaWYgKHJlc3BvbnNlU2hvd0RhbWFnZSkge1xyXG4gICAgICBvcHBvbmVudC5jaGFyYWN0ZXIuaGVhbHRoID0gaGVhbHRoIC0gZGFtYWdlO1xyXG4gICAgICB0aGlzLmNoZWNrSGVhbHRoUmVtb3ZlRGVhZChvcHBvbmVudCk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNoZWNrSGVhbHRoUmVtb3ZlRGVhZChwbGF5ZXIpIHtcclxuICAgIGlmIChwbGF5ZXIuY2hhcmFjdGVyLmhlYWx0aCA8PSAwKSB7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB0aGlzLmdhbWVTdGF0ZS5nZXRQcmVzdW1lZERlY2Vhc2VkUGxheWVySW5mbyhcclxuICAgICAgICBwbGF5ZXIucG9zaXRpb25cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChpbmZvLmluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlW2luZm8udGVhbUtleV0uc3BsaWNlKGluZm8uaW5kZXgsIDEpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzZXQoKSB7XHJcbiAgICBpZiAoIXRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0KSByZXR1cm47XHJcblxyXG4gICAgT2JqZWN0LmtleXModGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QpLmZvckVhY2goKGNvbG9yKSA9PiB7XHJcbiAgICAgIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0W2NvbG9yXSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0ID0gbnVsbDtcclxuICAgIHRoaXMuZ2FtZVBsYXkuc2V0Q3Vyc29yKGN1cnNvcnMuYXV0byk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVQaWN0dXJlKCkge1xyXG4gICAgY29uc3QgbGV2ZWwgPVxyXG4gICAgICB0aGlzLmdhbWVTdGF0ZS5sZXZlbEdhbWUgPiAwID8gdGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lIC0gMSA6IDA7XHJcbiAgICB0aGlzLmdhbWVQbGF5LmRyYXdVaShPYmplY3QudmFsdWVzKHRoZW1lcylbbGV2ZWxdKTtcclxuICAgIHRoaXMuZ2FtZVBsYXkucmVkcmF3UG9zaXRpb25zKHRoaXMuZ2FtZVN0YXRlLmdldEFsbFBsYXllcigpKTtcclxuXHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QgJiYgdGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QueWVsbG93KSB7XHJcbiAgICAgIHRoaXMuZ2FtZVBsYXkuc2VsZWN0Q2VsbCh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC55ZWxsb3cpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZG9BdHRhY2tDb21wKCkge1xyXG4gICAgY29uc3QgYWN0aXZlQ29tcCA9IGdldFJhbmRvbUNoYXJhY3Rlcih0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbSk7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyID0gYWN0aXZlQ29tcDtcclxuICAgIHRoaXMucmVhY3RPbkNsaWNrKGFjdGl2ZUNvbXAsIFtcImRhZW1vblwiLCBcInVuZGVhZFwiLCBcInZhbXBpcmVcIl0pO1xyXG5cclxuICAgIGNvbnN0IHVzZXJQb3NpdGlvbiA9IHRoaXMuZ2FtZVN0YXRlLmdldFVzZXJQb3NpdGlvbigpO1xyXG5cclxuICAgIGlmICh1c2VyUG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCByZXNwb25zZURvRGFtYWdlID0gYXdhaXQgdGhpcy5kb0RhbWFnZSh1c2VyUG9zaXRpb24pO1xyXG4gICAgICBpZiAocmVzcG9uc2VEb0RhbWFnZSkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tBbmRFbmRHYW1lSWZOZWNlc3NhcnkoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVBpY3R1cmUoKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhci5wb3NpdGlvbiA9IHRoaXMubW92ZVRvUmFuZG9tUG9zaXRpb24oKTtcclxuICAgICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUuZ2V0QWxsUGxheWVyKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXIgPSBudWxsO1xyXG4gICAgdGhpcy5yZXNldCgpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tBbmRFbmRHYW1lSWZOZWNlc3NhcnkoKSB7XHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUudXNlclRlYW0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2NrID0gdHJ1ZTtcclxuXHJcbiAgICAgIHRoaXMuZ2FtZVBsYXkuc2hvd01vZGFsTWVzc2FnZShcIllvdSBsb3NlIVwiLCBcIjEyOTMzNVwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdmVUb1JhbmRvbVBvc2l0aW9uKCkge1xyXG4gICAgbGV0IHJhbmQ7XHJcbiAgICBsZXQgaXNQbGF5ZXI7XHJcbiAgICBkbyB7XHJcbiAgICAgIHJhbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmdhbWVTdGF0ZS50cmFuc2l0aW9uQ2VsbHMubGVuZ3RoKTtcclxuICAgICAgY29uc3QgcG90ZW50aWFsUG9zaXRpb24gPSB0aGlzLmdhbWVTdGF0ZS50cmFuc2l0aW9uQ2VsbHNbcmFuZF07XHJcbiAgICAgIGlzUGxheWVyID0gdGhpcy5nYW1lU3RhdGVcclxuICAgICAgICAuZ2V0QWxsUGxheWVyKClcclxuICAgICAgICAuc29tZSgobykgPT4gby5wb3NpdGlvbiA9PT0gcG90ZW50aWFsUG9zaXRpb24pO1xyXG4gICAgfSB3aGlsZSAoaXNQbGF5ZXIpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmdhbWVTdGF0ZS50cmFuc2l0aW9uQ2VsbHNbcmFuZF07XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJNb2RhbFBvcHVwIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwidGhpcyIsImVsZW1Nb2RhbCIsImV2ZW50U2hvd01vZGFsIiwiZXZlbnRIaWRlTW9kYWwiLCJoaWRpbmciLCJkZXN0cm95ZWQiLCJhbmltYXRpb25TcGVlZCIsImNyZWF0ZU1vZGFsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXJDbG9zZU1vZGFsIiwiYmluZCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibW9kYWxIVE1MIiwibW9kYWxGb290ZXJIVE1MIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVwbGFjZSIsInRpdGxlIiwiY29udGVudCIsImZvb3RlckJ1dHRvbnMiLCJidXR0b24iLCJtb2RhbEZvb3RlckJ1dHRvbiIsImNsYXNzIiwiaGFuZGxlciIsInRleHQiLCJpbm5lckhUTUwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzaG93IiwiZGlzcGF0Y2hFdmVudCIsImhpZGUiLCJyZW1vdmUiLCJzZXRUaW1lb3V0IiwiZSIsInRhcmdldCIsImRhdGFzZXQiLCJkaXNtaXNzIiwiZGVzdHJveSIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRDb250ZW50IiwiaHRtbCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRUaXRsZSIsImNhbGNUaWxlVHlwZSIsImluZGV4IiwiYm9hcmRTaXplIiwiaSIsInJlc3RvcmVDaGFyYWN0ZXJzIiwiY2hhcmFjdGVycyIsInJlc3RvcmVGbiIsIm1hcCIsInVwQXR0YWNrRGVmZW5jZSIsImJlZm9yZSIsImxpZmUiLCJNYXRoIiwiZmxvb3IiLCJtYXgiLCJvdmVyd3JpdGVQcm9wZXJ0aWVzIiwic291cmNlIiwiT2JqZWN0IiwiYXNzaWduIiwicHJhaXJpZSIsImRlc2VydCIsImFyY3RpYyIsIm1vdW50YWluIiwiR2FtZVN0YXRlIiwiZ2FtZVBsYXkiLCJsZXZlbEdhbWUiLCJpc01vdmUiLCJjb3VudENsaWNrIiwidXNlclRlYW1TdXJ2aXZvcnMiLCJoaXN0b3J5IiwicG9pbnRzIiwiYmxvY2siLCJ1c2VyVGVhbSIsImNvbXBUZWFtIiwiYWN0aXZlQ2hhciIsImluZGV4U2VsZWN0IiwidHJhbnNpdGlvbkNlbGxzIiwiYXR0YWNrQ2VsbHMiLCJzaG93TW9kYWwiLCJnZXRBbGxQbGF5ZXIiLCJFcnJvciIsImNhbGN1bGF0ZVN1bVBvaW50cyIsInJlZHVjZSIsImEiLCJiIiwiY2hhcmFjdGVyIiwiaGVhbHRoIiwiZ2V0VXNlclBvc2l0aW9uIiwiZm91bmRJdGVtIiwiZmluZCIsIml0ZW0iLCJpbmNsdWRlcyIsInBvc2l0aW9uIiwidW5kZWZpbmVkIiwiZmluZFByZXN1bWVkRGVjZWFzZWRQbGF5ZXIiLCJhY3RpdmVDaGFyVXNlciIsImdldFByZXN1bWVkRGVjZWFzZWRQbGF5ZXJJbmZvIiwiZmluZEluZGV4IiwidGVhbUtleSIsImdldFBsYXllciIsImVsIiwiZ2V0VHJhbnNpdGlvbkF0dGFja0NlbGxzIiwibWF4UmFuZ2UiLCJhdHRhY2siLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcnJheUNlbGxzIiwicHVzaCIsInRhYmxlQ2VsbHMiLCJjZWxscyIsInJlc3VsdCIsInMiLCJzbGljZSIsImdldFRhYmxlIiwiYWxsb3dlZENlbGxzIiwicm93IiwiaiIsImdldEF0dGFja0NlbGxzIiwidHJhbnNpdENlbGxzIiwiZ2V0VHJhbnNpdGlvbkNlbGxzIiwiVGVhbSIsIkNoYXJhY3RlciIsImxldmVsIiwidHlwZSIsIm5hbWUiLCJkZWZlbmNlIiwibGV2ZWxVcCIsIm1pbiIsIlBvc2l0aW9uZWRDaGFyYWN0ZXIiLCJ2YWx1ZSIsIl9jaGFyYWN0ZXIiLCJfcG9zaXRpb24iLCJCb3dtYW4iLCJzdXBlciIsIm1heEF0dGFjayIsIlN3b3Jkc21hbiIsIk1hZ2ljaWFuIiwiRGFlbW9uIiwiVW5kZWFkIiwiVmFtcGlyZSIsImNob29zZVJhbmRQb3NpdGlvbnMiLCJjaG9vc2VSYW5kUG9zaXRpb24iLCJyYW5kb20iLCJjcmVhdGVQb3NpdGlvbnNDaGFyIiwicGxheWVyVHlwZXMiLCJvcHBvbmVudCIsIl9yZWYiLCJtYXhMZXZlbCIsImNoYXJDb3VudCIsInBvc2l0aW9ucyIsInRlYW0iLCJhbGxvd2VkVHlwZXMiLCJjaGFyYWN0ZXJDb3VudCIsInBsYXllckdlbmVyYXRvciIsInJhbmRvbUxldmVsIiwiUmFuZG9tQ2xhc3MiLCJjaGFyYWN0ZXJHZW5lcmF0b3IiLCJuZXh0IiwiZ2VuZXJhdGVUZWFtIiwicmFuZFBvc2l0aW9ucyIsImZvckVhY2giLCJjaGFyIiwicmFuZFBvc2l0aW9uIiwiaXNQb3NpdGlvblVuaXF1ZSIsInJlc3RvcmVDaGFyIiwib2JqIiwiYm93bWFuIiwic3dvcmRzbWFuIiwibWFnaWNpYW4iLCJkYWVtb24iLCJ1bmRlYWQiLCJ2YW1waXJlIiwicmVzdG9yZVBvc2l0aW9uZWRDaGFyIiwiY29udGFpbmVyIiwiYm9hcmRFbCIsImNlbGxDbGlja0xpc3RlbmVycyIsImNlbGxFbnRlckxpc3RlbmVycyIsImNlbGxMZWF2ZUxpc3RlbmVycyIsIm5ld0dhbWVMaXN0ZW5lcnMiLCJzYXZlR2FtZUxpc3RlbmVycyIsImxvYWRHYW1lTGlzdGVuZXJzIiwiaXNNb2RhbCIsImluaXRNb2RhbExpc3RlbmVyIiwiYmluZFRvRE9NIiwiSFRNTEVsZW1lbnQiLCJjdXJyZW50TW9kYWwiLCJkcmF3VWkiLCJ0aGVtZSIsImNoZWNrQmluZGluZyIsIm5ld0dhbWVFbCIsInNhdmVHYW1lRWwiLCJsb2FkR2FtZUVsIiwiZXZlbnQiLCJvbk5ld0dhbWVDbGljayIsIm9uU2F2ZUdhbWVDbGljayIsIm9uTG9hZEdhbWVDbGljayIsImNlbGxFbCIsIm9uQ2VsbEVudGVyIiwib25DZWxsTGVhdmUiLCJvbkNlbGxDbGljayIsIkFycmF5IiwiZnJvbSIsImNoaWxkcmVuIiwicmVkcmF3UG9zaXRpb25zIiwiY2VsbCIsImNoYXJFbCIsImhlYWx0aEVsIiwiaGVhbHRoSW5kaWNhdG9yRWwiLCJzdHlsZSIsIndpZHRoIiwibWVzc2FnZSIsInVuaWNvZGUiLCJtb2RhbCIsImFkZENlbGxFbnRlckxpc3RlbmVyIiwiY2FsbGJhY2siLCJhZGRDZWxsTGVhdmVMaXN0ZW5lciIsImFkZENlbGxDbGlja0xpc3RlbmVyIiwiYWRkTmV3R2FtZUxpc3RlbmVyIiwiYWRkU2F2ZUdhbWVMaXN0ZW5lciIsImFkZExvYWRHYW1lTGlzdGVuZXIiLCJpbmRleE9mIiwiY3VycmVudFRhcmdldCIsIm8iLCJjYWxsIiwic2hvd01vZGFsTWVzc2FnZSIsInNlbGVjdENlbGwiLCJjb2xvciIsImRlc2VsZWN0Q2VsbCIsImZpbHRlciIsInN0YXJ0c1dpdGgiLCJzaG93Q2VsbFRvb2x0aXAiLCJoaWRlQ2VsbFRvb2x0aXAiLCJzaG93RGFtYWdlIiwiZGFtYWdlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJkYW1hZ2VFbCIsImNsYXNzTmFtZSIsInRleHRDb250ZW50Iiwic2V0Q3Vyc29yIiwiY3Vyc29yIiwic3RhdGVTZXJ2aWNlIiwic3RvcmFnZSIsInNhdmUiLCJzdGF0ZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwibG9hZCIsInBhcnNlIiwiZ2V0SXRlbSIsImxvY2FsU3RvcmFnZSIsImdhbWVDdHJsIiwiZ2FtZVN0YXRlIiwibmV3R2FtZSIsInNhdmVHYW1lIiwibG9hZEdhbWUiLCJldmVudHMiLCJpbml0IiwiaW5pdE5ld1RlYW1zIiwidXBkYXRlUGljdHVyZSIsImRhdGEiLCJyZXNldCIsInNhdmVkR2FtZVN0YXRlIiwicmVzdG9yZUdhbWVTdGF0ZSIsInJlc3RvcmVBY3RpdmVDaGFyYWN0ZXIiLCJzaG93R2FtZUluZm8iLCJoYW5kbGVMb2FkaW5nRXJyb3IiLCJzYXZlZFN0YXRlIiwicmVzZXRUZWFtcyIsInNhdmVkQWN0aXZlQ2hhciIsInJlc3RhcnRlZEFjdGl2ZUNoYXIiLCJyZWFjdE9uQ2xpY2siLCJnZXRVc2VyVGVhbSIsImdldENvbXBUZWFtIiwiX3JlZjIiLCJ0aGVtZVZhbHVlcyIsInZhbHVlcyIsInRoZW1lcyIsInVwZGF0ZVRlYW1zIiwicGxheWVyIiwibmV3VXNlclRlYW0iLCJhbGxTdGFydFBvc2l0aW9ucyIsInNwbGljZSIsInN1cnZpdm9yIiwibmV3UG9zaXRpb24iLCJjb25jYXQiLCJpY29uQ29kZSIsImhhbmRsZVVzZXJUdXJuIiwiaGFuZGxlQ29tcHV0ZXJUdXJuIiwiZ3JlZW4iLCJyZWQiLCJkb0RhbWFnZSIsImNoZWNrR2FtZVByb2dyZXNzIiwiZG9BdHRhY2tDb21wIiwiZ2V0SW5mbyIsImlzVHJhbnNpdGlvbkNlbGwiLCJpc0F0dGFja0NlbGwiLCJpc1VzZXJDZWxsIiwic29tZSIsImlzQ29tcENlbGwiLCJjdXJzb3JzIiwiaGFzU2VsZWN0ZWRHcmVlbiIsImlzQ29tcFRlYW1Qb3NpdGlvbiIsImFycmF5VHlwZXMiLCJ1cGRhdGVTZWxlY3RlZENlbGwiLCJoYW5kbGVJbnZhbGlkU2VsZWN0aW9uIiwibnVtIiwieWVsbG93IiwiaXNTZWxlY3RlZCIsImlzTm90SW5BdHRhY2tDZWxscyIsImlzQ29tcHV0ZXJUZWFtUG9zaXRpb24iLCJyb3VuZCIsImNhbGN1bGF0ZURhbWFnZSIsImNoZWNrSGVhbHRoUmVtb3ZlRGVhZCIsImluZm8iLCJrZXlzIiwiYWN0aXZlQ29tcCIsInVzZXJQb3NpdGlvbiIsImNoZWNrQW5kRW5kR2FtZUlmTmVjZXNzYXJ5IiwibW92ZVRvUmFuZG9tUG9zaXRpb24iLCJyYW5kIiwiaXNQbGF5ZXIiLCJwb3RlbnRpYWxQb3NpdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=